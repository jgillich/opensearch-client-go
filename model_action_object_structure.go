/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ActionObjectStructure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActionObjectStructure{}

// ActionObjectStructure struct for ActionObjectStructure
type ActionObjectStructure struct {
	Add *UserDefinedStructure `json:"add,omitempty"`
	Remove *UserDefinedStructure `json:"remove,omitempty"`
	RemoveIndex *UserDefinedStructure `json:"remove_index,omitempty"`
}

// NewActionObjectStructure instantiates a new ActionObjectStructure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionObjectStructure() *ActionObjectStructure {
	this := ActionObjectStructure{}
	return &this
}

// NewActionObjectStructureWithDefaults instantiates a new ActionObjectStructure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionObjectStructureWithDefaults() *ActionObjectStructure {
	this := ActionObjectStructure{}
	return &this
}

// GetAdd returns the Add field value if set, zero value otherwise.
func (o *ActionObjectStructure) GetAdd() UserDefinedStructure {
	if o == nil || IsNil(o.Add) {
		var ret UserDefinedStructure
		return ret
	}
	return *o.Add
}

// GetAddOk returns a tuple with the Add field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionObjectStructure) GetAddOk() (*UserDefinedStructure, bool) {
	if o == nil || IsNil(o.Add) {
		return nil, false
	}
	return o.Add, true
}

// HasAdd returns a boolean if a field has been set.
func (o *ActionObjectStructure) HasAdd() bool {
	if o != nil && !IsNil(o.Add) {
		return true
	}

	return false
}

// SetAdd gets a reference to the given UserDefinedStructure and assigns it to the Add field.
func (o *ActionObjectStructure) SetAdd(v UserDefinedStructure) {
	o.Add = &v
}

// GetRemove returns the Remove field value if set, zero value otherwise.
func (o *ActionObjectStructure) GetRemove() UserDefinedStructure {
	if o == nil || IsNil(o.Remove) {
		var ret UserDefinedStructure
		return ret
	}
	return *o.Remove
}

// GetRemoveOk returns a tuple with the Remove field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionObjectStructure) GetRemoveOk() (*UserDefinedStructure, bool) {
	if o == nil || IsNil(o.Remove) {
		return nil, false
	}
	return o.Remove, true
}

// HasRemove returns a boolean if a field has been set.
func (o *ActionObjectStructure) HasRemove() bool {
	if o != nil && !IsNil(o.Remove) {
		return true
	}

	return false
}

// SetRemove gets a reference to the given UserDefinedStructure and assigns it to the Remove field.
func (o *ActionObjectStructure) SetRemove(v UserDefinedStructure) {
	o.Remove = &v
}

// GetRemoveIndex returns the RemoveIndex field value if set, zero value otherwise.
func (o *ActionObjectStructure) GetRemoveIndex() UserDefinedStructure {
	if o == nil || IsNil(o.RemoveIndex) {
		var ret UserDefinedStructure
		return ret
	}
	return *o.RemoveIndex
}

// GetRemoveIndexOk returns a tuple with the RemoveIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionObjectStructure) GetRemoveIndexOk() (*UserDefinedStructure, bool) {
	if o == nil || IsNil(o.RemoveIndex) {
		return nil, false
	}
	return o.RemoveIndex, true
}

// HasRemoveIndex returns a boolean if a field has been set.
func (o *ActionObjectStructure) HasRemoveIndex() bool {
	if o != nil && !IsNil(o.RemoveIndex) {
		return true
	}

	return false
}

// SetRemoveIndex gets a reference to the given UserDefinedStructure and assigns it to the RemoveIndex field.
func (o *ActionObjectStructure) SetRemoveIndex(v UserDefinedStructure) {
	o.RemoveIndex = &v
}

func (o ActionObjectStructure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActionObjectStructure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Add) {
		toSerialize["add"] = o.Add
	}
	if !IsNil(o.Remove) {
		toSerialize["remove"] = o.Remove
	}
	if !IsNil(o.RemoveIndex) {
		toSerialize["remove_index"] = o.RemoveIndex
	}
	return toSerialize, nil
}

type NullableActionObjectStructure struct {
	value *ActionObjectStructure
	isSet bool
}

func (v NullableActionObjectStructure) Get() *ActionObjectStructure {
	return v.value
}

func (v *NullableActionObjectStructure) Set(val *ActionObjectStructure) {
	v.value = val
	v.isSet = true
}

func (v NullableActionObjectStructure) IsSet() bool {
	return v.isSet
}

func (v *NullableActionObjectStructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionObjectStructure(val *ActionObjectStructure) *NullableActionObjectStructure {
	return &NullableActionObjectStructure{value: val, isSet: true}
}

func (v NullableActionObjectStructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionObjectStructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


