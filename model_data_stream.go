/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DataStream type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataStream{}

// DataStream struct for DataStream
type DataStream struct {
	Name *string `json:"name,omitempty"`
	TimestampField *DataStreamTimestampField `json:"timestamp_field,omitempty"`
	Indices []DataStreamIndex `json:"indices,omitempty"`
	Generation *int64 `json:"generation,omitempty"`
	Status *DataStreamStatus `json:"status,omitempty"`
	Template *string `json:"template,omitempty"`
}

// NewDataStream instantiates a new DataStream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStream() *DataStream {
	this := DataStream{}
	return &this
}

// NewDataStreamWithDefaults instantiates a new DataStream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStreamWithDefaults() *DataStream {
	this := DataStream{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DataStream) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStream) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataStream) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DataStream) SetName(v string) {
	o.Name = &v
}

// GetTimestampField returns the TimestampField field value if set, zero value otherwise.
func (o *DataStream) GetTimestampField() DataStreamTimestampField {
	if o == nil || IsNil(o.TimestampField) {
		var ret DataStreamTimestampField
		return ret
	}
	return *o.TimestampField
}

// GetTimestampFieldOk returns a tuple with the TimestampField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStream) GetTimestampFieldOk() (*DataStreamTimestampField, bool) {
	if o == nil || IsNil(o.TimestampField) {
		return nil, false
	}
	return o.TimestampField, true
}

// HasTimestampField returns a boolean if a field has been set.
func (o *DataStream) HasTimestampField() bool {
	if o != nil && !IsNil(o.TimestampField) {
		return true
	}

	return false
}

// SetTimestampField gets a reference to the given DataStreamTimestampField and assigns it to the TimestampField field.
func (o *DataStream) SetTimestampField(v DataStreamTimestampField) {
	o.TimestampField = &v
}

// GetIndices returns the Indices field value if set, zero value otherwise.
func (o *DataStream) GetIndices() []DataStreamIndex {
	if o == nil || IsNil(o.Indices) {
		var ret []DataStreamIndex
		return ret
	}
	return o.Indices
}

// GetIndicesOk returns a tuple with the Indices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStream) GetIndicesOk() ([]DataStreamIndex, bool) {
	if o == nil || IsNil(o.Indices) {
		return nil, false
	}
	return o.Indices, true
}

// HasIndices returns a boolean if a field has been set.
func (o *DataStream) HasIndices() bool {
	if o != nil && !IsNil(o.Indices) {
		return true
	}

	return false
}

// SetIndices gets a reference to the given []DataStreamIndex and assigns it to the Indices field.
func (o *DataStream) SetIndices(v []DataStreamIndex) {
	o.Indices = v
}

// GetGeneration returns the Generation field value if set, zero value otherwise.
func (o *DataStream) GetGeneration() int64 {
	if o == nil || IsNil(o.Generation) {
		var ret int64
		return ret
	}
	return *o.Generation
}

// GetGenerationOk returns a tuple with the Generation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStream) GetGenerationOk() (*int64, bool) {
	if o == nil || IsNil(o.Generation) {
		return nil, false
	}
	return o.Generation, true
}

// HasGeneration returns a boolean if a field has been set.
func (o *DataStream) HasGeneration() bool {
	if o != nil && !IsNil(o.Generation) {
		return true
	}

	return false
}

// SetGeneration gets a reference to the given int64 and assigns it to the Generation field.
func (o *DataStream) SetGeneration(v int64) {
	o.Generation = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DataStream) GetStatus() DataStreamStatus {
	if o == nil || IsNil(o.Status) {
		var ret DataStreamStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStream) GetStatusOk() (*DataStreamStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DataStream) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DataStreamStatus and assigns it to the Status field.
func (o *DataStream) SetStatus(v DataStreamStatus) {
	o.Status = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *DataStream) GetTemplate() string {
	if o == nil || IsNil(o.Template) {
		var ret string
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStream) GetTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *DataStream) HasTemplate() bool {
	if o != nil && !IsNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given string and assigns it to the Template field.
func (o *DataStream) SetTemplate(v string) {
	o.Template = &v
}

func (o DataStream) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataStream) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TimestampField) {
		toSerialize["timestamp_field"] = o.TimestampField
	}
	if !IsNil(o.Indices) {
		toSerialize["indices"] = o.Indices
	}
	if !IsNil(o.Generation) {
		toSerialize["generation"] = o.Generation
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	return toSerialize, nil
}

type NullableDataStream struct {
	value *DataStream
	isSet bool
}

func (v NullableDataStream) Get() *DataStream {
	return v.value
}

func (v *NullableDataStream) Set(val *DataStream) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStream) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStream(val *DataStream) *NullableDataStream {
	return &NullableDataStream{value: val, isSet: true}
}

func (v NullableDataStream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


