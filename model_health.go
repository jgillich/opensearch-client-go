/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
	"fmt"
)

// Health Health status ('green', 'yellow', or 'red') to filter only indices matching the specified health status.
type Health string

// List of Health
const (
	HEALTH_GREEN Health = "green"
	HEALTH_YELLOW Health = "yellow"
	HEALTH_RED Health = "red"
)

// All allowed values of Health enum
var AllowedHealthEnumValues = []Health{
	"green",
	"yellow",
	"red",
}

func (v *Health) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Health(value)
	for _, existing := range AllowedHealthEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Health", value)
}

// NewHealthFromValue returns a pointer to a valid Health
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHealthFromValue(v string) (*Health, error) {
	ev := Health(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Health: valid values are %v", v, AllowedHealthEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Health) IsValid() bool {
	for _, existing := range AllowedHealthEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Health value
func (v Health) Ptr() *Health {
	return &v
}

type NullableHealth struct {
	value *Health
	isSet bool
}

func (v NullableHealth) Get() *Health {
	return v.value
}

func (v *NullableHealth) Set(val *Health) {
	v.value = val
	v.isSet = true
}

func (v NullableHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealth(val *Health) *NullableHealth {
	return &NullableHealth{value: val, isSet: true}
}

func (v NullableHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

