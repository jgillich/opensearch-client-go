/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditConfigWithReadOnly type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditConfigWithReadOnly{}

// AuditConfigWithReadOnly struct for AuditConfigWithReadOnly
type AuditConfigWithReadOnly struct {
	Readonly []string `json:"_readonly,omitempty"`
	Config *AuditConfig `json:"config,omitempty"`
}

// NewAuditConfigWithReadOnly instantiates a new AuditConfigWithReadOnly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditConfigWithReadOnly() *AuditConfigWithReadOnly {
	this := AuditConfigWithReadOnly{}
	return &this
}

// NewAuditConfigWithReadOnlyWithDefaults instantiates a new AuditConfigWithReadOnly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditConfigWithReadOnlyWithDefaults() *AuditConfigWithReadOnly {
	this := AuditConfigWithReadOnly{}
	return &this
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *AuditConfigWithReadOnly) GetReadonly() []string {
	if o == nil || IsNil(o.Readonly) {
		var ret []string
		return ret
	}
	return o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditConfigWithReadOnly) GetReadonlyOk() ([]string, bool) {
	if o == nil || IsNil(o.Readonly) {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *AuditConfigWithReadOnly) HasReadonly() bool {
	if o != nil && !IsNil(o.Readonly) {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given []string and assigns it to the Readonly field.
func (o *AuditConfigWithReadOnly) SetReadonly(v []string) {
	o.Readonly = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *AuditConfigWithReadOnly) GetConfig() AuditConfig {
	if o == nil || IsNil(o.Config) {
		var ret AuditConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditConfigWithReadOnly) GetConfigOk() (*AuditConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *AuditConfigWithReadOnly) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given AuditConfig and assigns it to the Config field.
func (o *AuditConfigWithReadOnly) SetConfig(v AuditConfig) {
	o.Config = &v
}

func (o AuditConfigWithReadOnly) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditConfigWithReadOnly) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Readonly) {
		toSerialize["_readonly"] = o.Readonly
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableAuditConfigWithReadOnly struct {
	value *AuditConfigWithReadOnly
	isSet bool
}

func (v NullableAuditConfigWithReadOnly) Get() *AuditConfigWithReadOnly {
	return v.value
}

func (v *NullableAuditConfigWithReadOnly) Set(val *AuditConfigWithReadOnly) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditConfigWithReadOnly) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditConfigWithReadOnly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditConfigWithReadOnly(val *AuditConfigWithReadOnly) *NullableAuditConfigWithReadOnly {
	return &NullableAuditConfigWithReadOnly{value: val, isSet: true}
}

func (v NullableAuditConfigWithReadOnly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditConfigWithReadOnly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


