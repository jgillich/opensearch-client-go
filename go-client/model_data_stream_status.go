/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
	"fmt"
)

// DataStreamStatus the model 'DataStreamStatus'
type DataStreamStatus string

// List of DataStreamStatus
const (
	GREEN DataStreamStatus = "green"
	YELLOW DataStreamStatus = "yellow"
	RED DataStreamStatus = "red"
)

// All allowed values of DataStreamStatus enum
var AllowedDataStreamStatusEnumValues = []DataStreamStatus{
	"green",
	"yellow",
	"red",
}

func (v *DataStreamStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataStreamStatus(value)
	for _, existing := range AllowedDataStreamStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataStreamStatus", value)
}

// NewDataStreamStatusFromValue returns a pointer to a valid DataStreamStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataStreamStatusFromValue(v string) (*DataStreamStatus, error) {
	ev := DataStreamStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataStreamStatus: valid values are %v", v, AllowedDataStreamStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataStreamStatus) IsValid() bool {
	for _, existing := range AllowedDataStreamStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataStreamStatus value
func (v DataStreamStatus) Ptr() *DataStreamStatus {
	return &v
}

type NullableDataStreamStatus struct {
	value *DataStreamStatus
	isSet bool
}

func (v NullableDataStreamStatus) Get() *DataStreamStatus {
	return v.value
}

func (v *NullableDataStreamStatus) Set(val *DataStreamStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStreamStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStreamStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStreamStatus(val *DataStreamStatus) *NullableDataStreamStatus {
	return &NullableDataStreamStatus{value: val, isSet: true}
}

func (v NullableDataStreamStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStreamStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

