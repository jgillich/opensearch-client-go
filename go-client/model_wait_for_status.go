/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
	"fmt"
)

// WaitForStatus Wait until cluster is in a specific state.
type WaitForStatus string

// List of WaitForStatus
const (
	GREEN WaitForStatus = "green"
	YELLOW WaitForStatus = "yellow"
	RED WaitForStatus = "red"
)

// All allowed values of WaitForStatus enum
var AllowedWaitForStatusEnumValues = []WaitForStatus{
	"green",
	"yellow",
	"red",
}

func (v *WaitForStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WaitForStatus(value)
	for _, existing := range AllowedWaitForStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WaitForStatus", value)
}

// NewWaitForStatusFromValue returns a pointer to a valid WaitForStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWaitForStatusFromValue(v string) (*WaitForStatus, error) {
	ev := WaitForStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WaitForStatus: valid values are %v", v, AllowedWaitForStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WaitForStatus) IsValid() bool {
	for _, existing := range AllowedWaitForStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WaitForStatus value
func (v WaitForStatus) Ptr() *WaitForStatus {
	return &v
}

type NullableWaitForStatus struct {
	value *WaitForStatus
	isSet bool
}

func (v NullableWaitForStatus) Get() *WaitForStatus {
	return v.value
}

func (v *NullableWaitForStatus) Set(val *WaitForStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWaitForStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWaitForStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaitForStatus(val *WaitForStatus) *NullableWaitForStatus {
	return &NullableWaitForStatus{value: val, isSet: true}
}

func (v NullableWaitForStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaitForStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

