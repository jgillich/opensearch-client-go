/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
)

// checks if the CertificatesDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificatesDetail{}

// CertificatesDetail struct for CertificatesDetail
type CertificatesDetail struct {
	IssuerDn *string `json:"issuer_dn,omitempty"`
	SubjectDn *string `json:"subject_dn,omitempty"`
	San *string `json:"san,omitempty"`
	NotBefore *string `json:"not_before,omitempty"`
	NotAfter *string `json:"not_after,omitempty"`
}

// NewCertificatesDetail instantiates a new CertificatesDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificatesDetail() *CertificatesDetail {
	this := CertificatesDetail{}
	return &this
}

// NewCertificatesDetailWithDefaults instantiates a new CertificatesDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificatesDetailWithDefaults() *CertificatesDetail {
	this := CertificatesDetail{}
	return &this
}

// GetIssuerDn returns the IssuerDn field value if set, zero value otherwise.
func (o *CertificatesDetail) GetIssuerDn() string {
	if o == nil || IsNil(o.IssuerDn) {
		var ret string
		return ret
	}
	return *o.IssuerDn
}

// GetIssuerDnOk returns a tuple with the IssuerDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesDetail) GetIssuerDnOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerDn) {
		return nil, false
	}
	return o.IssuerDn, true
}

// HasIssuerDn returns a boolean if a field has been set.
func (o *CertificatesDetail) HasIssuerDn() bool {
	if o != nil && !IsNil(o.IssuerDn) {
		return true
	}

	return false
}

// SetIssuerDn gets a reference to the given string and assigns it to the IssuerDn field.
func (o *CertificatesDetail) SetIssuerDn(v string) {
	o.IssuerDn = &v
}

// GetSubjectDn returns the SubjectDn field value if set, zero value otherwise.
func (o *CertificatesDetail) GetSubjectDn() string {
	if o == nil || IsNil(o.SubjectDn) {
		var ret string
		return ret
	}
	return *o.SubjectDn
}

// GetSubjectDnOk returns a tuple with the SubjectDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesDetail) GetSubjectDnOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectDn) {
		return nil, false
	}
	return o.SubjectDn, true
}

// HasSubjectDn returns a boolean if a field has been set.
func (o *CertificatesDetail) HasSubjectDn() bool {
	if o != nil && !IsNil(o.SubjectDn) {
		return true
	}

	return false
}

// SetSubjectDn gets a reference to the given string and assigns it to the SubjectDn field.
func (o *CertificatesDetail) SetSubjectDn(v string) {
	o.SubjectDn = &v
}

// GetSan returns the San field value if set, zero value otherwise.
func (o *CertificatesDetail) GetSan() string {
	if o == nil || IsNil(o.San) {
		var ret string
		return ret
	}
	return *o.San
}

// GetSanOk returns a tuple with the San field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesDetail) GetSanOk() (*string, bool) {
	if o == nil || IsNil(o.San) {
		return nil, false
	}
	return o.San, true
}

// HasSan returns a boolean if a field has been set.
func (o *CertificatesDetail) HasSan() bool {
	if o != nil && !IsNil(o.San) {
		return true
	}

	return false
}

// SetSan gets a reference to the given string and assigns it to the San field.
func (o *CertificatesDetail) SetSan(v string) {
	o.San = &v
}

// GetNotBefore returns the NotBefore field value if set, zero value otherwise.
func (o *CertificatesDetail) GetNotBefore() string {
	if o == nil || IsNil(o.NotBefore) {
		var ret string
		return ret
	}
	return *o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesDetail) GetNotBeforeOk() (*string, bool) {
	if o == nil || IsNil(o.NotBefore) {
		return nil, false
	}
	return o.NotBefore, true
}

// HasNotBefore returns a boolean if a field has been set.
func (o *CertificatesDetail) HasNotBefore() bool {
	if o != nil && !IsNil(o.NotBefore) {
		return true
	}

	return false
}

// SetNotBefore gets a reference to the given string and assigns it to the NotBefore field.
func (o *CertificatesDetail) SetNotBefore(v string) {
	o.NotBefore = &v
}

// GetNotAfter returns the NotAfter field value if set, zero value otherwise.
func (o *CertificatesDetail) GetNotAfter() string {
	if o == nil || IsNil(o.NotAfter) {
		var ret string
		return ret
	}
	return *o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesDetail) GetNotAfterOk() (*string, bool) {
	if o == nil || IsNil(o.NotAfter) {
		return nil, false
	}
	return o.NotAfter, true
}

// HasNotAfter returns a boolean if a field has been set.
func (o *CertificatesDetail) HasNotAfter() bool {
	if o != nil && !IsNil(o.NotAfter) {
		return true
	}

	return false
}

// SetNotAfter gets a reference to the given string and assigns it to the NotAfter field.
func (o *CertificatesDetail) SetNotAfter(v string) {
	o.NotAfter = &v
}

func (o CertificatesDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificatesDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IssuerDn) {
		toSerialize["issuer_dn"] = o.IssuerDn
	}
	if !IsNil(o.SubjectDn) {
		toSerialize["subject_dn"] = o.SubjectDn
	}
	if !IsNil(o.San) {
		toSerialize["san"] = o.San
	}
	if !IsNil(o.NotBefore) {
		toSerialize["not_before"] = o.NotBefore
	}
	if !IsNil(o.NotAfter) {
		toSerialize["not_after"] = o.NotAfter
	}
	return toSerialize, nil
}

type NullableCertificatesDetail struct {
	value *CertificatesDetail
	isSet bool
}

func (v NullableCertificatesDetail) Get() *CertificatesDetail {
	return v.value
}

func (v *NullableCertificatesDetail) Set(val *CertificatesDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificatesDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificatesDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificatesDetail(val *CertificatesDetail) *NullableCertificatesDetail {
	return &NullableCertificatesDetail{value: val, isSet: true}
}

func (v NullableCertificatesDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificatesDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


