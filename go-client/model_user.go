/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	Hash *string `json:"hash,omitempty"`
	Reserved *bool `json:"reserved,omitempty"`
	Hidden *bool `json:"hidden,omitempty"`
	BackendRoles []string `json:"backend_roles,omitempty"`
	Attributes *map[string]string `json:"attributes,omitempty"`
	Description *string `json:"description,omitempty"`
	OpendistroSecurityRoles []string `json:"opendistro_security_roles,omitempty"`
	Static *bool `json:"static,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *User) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *User) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *User) SetHash(v string) {
	o.Hash = &v
}

// GetReserved returns the Reserved field value if set, zero value otherwise.
func (o *User) GetReserved() bool {
	if o == nil || IsNil(o.Reserved) {
		var ret bool
		return ret
	}
	return *o.Reserved
}

// GetReservedOk returns a tuple with the Reserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetReservedOk() (*bool, bool) {
	if o == nil || IsNil(o.Reserved) {
		return nil, false
	}
	return o.Reserved, true
}

// HasReserved returns a boolean if a field has been set.
func (o *User) HasReserved() bool {
	if o != nil && !IsNil(o.Reserved) {
		return true
	}

	return false
}

// SetReserved gets a reference to the given bool and assigns it to the Reserved field.
func (o *User) SetReserved(v bool) {
	o.Reserved = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *User) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *User) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *User) SetHidden(v bool) {
	o.Hidden = &v
}

// GetBackendRoles returns the BackendRoles field value if set, zero value otherwise.
func (o *User) GetBackendRoles() []string {
	if o == nil || IsNil(o.BackendRoles) {
		var ret []string
		return ret
	}
	return o.BackendRoles
}

// GetBackendRolesOk returns a tuple with the BackendRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetBackendRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.BackendRoles) {
		return nil, false
	}
	return o.BackendRoles, true
}

// HasBackendRoles returns a boolean if a field has been set.
func (o *User) HasBackendRoles() bool {
	if o != nil && !IsNil(o.BackendRoles) {
		return true
	}

	return false
}

// SetBackendRoles gets a reference to the given []string and assigns it to the BackendRoles field.
func (o *User) SetBackendRoles(v []string) {
	o.BackendRoles = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *User) GetAttributes() map[string]string {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]string
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAttributesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *User) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]string and assigns it to the Attributes field.
func (o *User) SetAttributes(v map[string]string) {
	o.Attributes = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *User) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *User) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *User) SetDescription(v string) {
	o.Description = &v
}

// GetOpendistroSecurityRoles returns the OpendistroSecurityRoles field value if set, zero value otherwise.
func (o *User) GetOpendistroSecurityRoles() []string {
	if o == nil || IsNil(o.OpendistroSecurityRoles) {
		var ret []string
		return ret
	}
	return o.OpendistroSecurityRoles
}

// GetOpendistroSecurityRolesOk returns a tuple with the OpendistroSecurityRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetOpendistroSecurityRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.OpendistroSecurityRoles) {
		return nil, false
	}
	return o.OpendistroSecurityRoles, true
}

// HasOpendistroSecurityRoles returns a boolean if a field has been set.
func (o *User) HasOpendistroSecurityRoles() bool {
	if o != nil && !IsNil(o.OpendistroSecurityRoles) {
		return true
	}

	return false
}

// SetOpendistroSecurityRoles gets a reference to the given []string and assigns it to the OpendistroSecurityRoles field.
func (o *User) SetOpendistroSecurityRoles(v []string) {
	o.OpendistroSecurityRoles = v
}

// GetStatic returns the Static field value if set, zero value otherwise.
func (o *User) GetStatic() bool {
	if o == nil || IsNil(o.Static) {
		var ret bool
		return ret
	}
	return *o.Static
}

// GetStaticOk returns a tuple with the Static field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetStaticOk() (*bool, bool) {
	if o == nil || IsNil(o.Static) {
		return nil, false
	}
	return o.Static, true
}

// HasStatic returns a boolean if a field has been set.
func (o *User) HasStatic() bool {
	if o != nil && !IsNil(o.Static) {
		return true
	}

	return false
}

// SetStatic gets a reference to the given bool and assigns it to the Static field.
func (o *User) SetStatic(v bool) {
	o.Static = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.Reserved) {
		toSerialize["reserved"] = o.Reserved
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.BackendRoles) {
		toSerialize["backend_roles"] = o.BackendRoles
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.OpendistroSecurityRoles) {
		toSerialize["opendistro_security_roles"] = o.OpendistroSecurityRoles
	}
	if !IsNil(o.Static) {
		toSerialize["static"] = o.Static
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


