/*
OpenSearch

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package opensearch

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/jgillich/opensearch-client-go"
)

func Test_opensearch_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService BulkPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.BulkPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BulkPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.BulkPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BulkPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.BulkPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService BulkPutWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.BulkPutWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatAliases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatAliases(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatAliasesWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.CatAliasesWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatAllPitSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CatAllPitSegments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatAllocation(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatAllocationWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultAPI.CatAllocationWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatClusterManager", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatClusterManager(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatCount(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatCountWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.CatCountWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatFielddata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatFielddata(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatFielddataWithFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fields string

		httpRes, err := apiClient.DefaultAPI.CatFielddataWithFields(context.Background(), fields).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatHealth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatHealth(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatHelp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatHelp(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatIndices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatIndices(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatIndicesWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.CatIndicesWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatMaster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatMaster(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatNodeattrs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatNodeattrs(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatNodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatNodes(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatPendingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatPendingTasks(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatPitSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.CatPitSegments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatPlugins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatPlugins(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatRecovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatRecovery(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatRecoveryWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.CatRecoveryWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatRepositories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatRepositories(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatSegmentReplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatSegmentReplication(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatSegmentReplicationWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.CatSegmentReplicationWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatSegments(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatSegmentsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.CatSegmentsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatShards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatShards(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatShardsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.CatShardsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatSnapshots(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatSnapshotsWithRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultAPI.CatSnapshotsWithRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatTasks(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatTemplates(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatTemplatesWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.CatTemplatesWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatThreadPool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CatThreadPool(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CatThreadPoolWithThreadPoolPatterns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var threadPoolPatterns string

		httpRes, err := apiClient.DefaultAPI.CatThreadPoolWithThreadPoolPatterns(context.Background(), threadPoolPatterns).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ChangePassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ChangePassword(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClearScroll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClearScroll(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClearScrollWithScrollId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scrollId string

		httpRes, err := apiClient.DefaultAPI.ClearScrollWithScrollId(context.Background(), scrollId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterAllocationExplainGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterAllocationExplainGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterAllocationExplainPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterAllocationExplainPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterDeleteComponentTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.ClusterDeleteComponentTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterDeleteDecommissionAwareness", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterDeleteDecommissionAwareness(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterDeleteVotingConfigExclusions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterDeleteVotingConfigExclusions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterDeleteWeightedRouting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterDeleteWeightedRouting(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterExistsComponentTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.ClusterExistsComponentTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterGetComponentTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterGetComponentTemplate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterGetComponentTemplateWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.ClusterGetComponentTemplateWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterGetDecommissionAwareness", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var awarenessAttributeName string

		httpRes, err := apiClient.DefaultAPI.ClusterGetDecommissionAwareness(context.Background(), awarenessAttributeName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterGetSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ClusterGetSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterGetWeightedRouting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attribute string

		httpRes, err := apiClient.DefaultAPI.ClusterGetWeightedRouting(context.Background(), attribute).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterHealth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterHealth(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterHealthWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.ClusterHealthWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterPendingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterPendingTasks(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterPostVotingConfigExclusions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterPostVotingConfigExclusions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterPutComponentTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.ClusterPutComponentTemplatePost(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterPutComponentTemplatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.ClusterPutComponentTemplatePut(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterPutDecommissionAwareness", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var awarenessAttributeName string
		var awarenessAttributeValue string

		httpRes, err := apiClient.DefaultAPI.ClusterPutDecommissionAwareness(context.Background(), awarenessAttributeName, awarenessAttributeValue).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterPutSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ClusterPutSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterPutWeightedRouting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attribute string

		httpRes, err := apiClient.DefaultAPI.ClusterPutWeightedRouting(context.Background(), attribute).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterRemoteInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterRemoteInfo(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterReroute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterReroute(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterState(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterStateWithIndexMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var metric string

		httpRes, err := apiClient.DefaultAPI.ClusterStateWithIndexMetric(context.Background(), index, metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterStateWithMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string

		httpRes, err := apiClient.DefaultAPI.ClusterStateWithMetric(context.Background(), metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ClusterStats(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ClusterStatsWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultAPI.ClusterStatsWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CountGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CountGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.CountGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CountPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.CountPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CountPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.CountPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateActionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionGroup string

		resp, httpRes, err := apiClient.DefaultAPI.CreateActionGroup(context.Background(), actionGroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreatePit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultAPI.CreatePit(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultAPI.CreatePost(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultAPI.CreatePut(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultAPI.CreateRole(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateRoleMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultAPI.CreateRoleMapping(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.DefaultAPI.CreateTenant(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService CreateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.DefaultAPI.CreateUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DanglingIndicesDeleteDanglingIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexUuid string

		httpRes, err := apiClient.DefaultAPI.DanglingIndicesDeleteDanglingIndex(context.Background(), indexUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DanglingIndicesImportDanglingIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexUuid string

		httpRes, err := apiClient.DefaultAPI.DanglingIndicesImportDanglingIndex(context.Background(), indexUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DanglingIndicesListDanglingIndices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.DanglingIndicesListDanglingIndices(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Delete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultAPI.Delete(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteActionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionGroup string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteActionGroup(context.Background(), actionGroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteAllPits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.DeleteAllPits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteByQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.DeleteByQuery(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteByQueryRethrottle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.DeleteByQueryRethrottle(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteDistinguishedNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteDistinguishedNames(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeletePit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.DeletePit(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteRole(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteRoleMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteRoleMapping(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteScript", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.DeleteScript(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteTenant(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService DeleteUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.DefaultAPI.DeleteUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Exists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultAPI.Exists(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExistsSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultAPI.ExistsSource(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExplainGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultAPI.ExplainGet(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ExplainPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultAPI.ExplainPost(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FieldCapsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.FieldCapsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FieldCapsGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.FieldCapsGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FieldCapsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.FieldCapsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FieldCapsPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.FieldCapsPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService FlushCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.FlushCache(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Get", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		resp, httpRes, err := apiClient.DefaultAPI.Get(context.Background(), id, index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetAccountDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetAccountDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetActionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionGroup string

		resp, httpRes, err := apiClient.DefaultAPI.GetActionGroup(context.Background(), actionGroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetActionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetActionGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetAllPits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetAllPits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetAuditConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetAuditConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetCertificates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetDistinguishedNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetDistinguishedNames(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetDistinguishedNamesWithClusterName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.DefaultAPI.GetDistinguishedNamesWithClusterName(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultAPI.GetRole(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRoleMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultAPI.GetRoleMapping(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRoleMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetRoleMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetScript", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.GetScript(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetScriptContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.GetScriptContext(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetScriptLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.GetScriptLanguages(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultAPI.GetSource(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.DefaultAPI.GetTenant(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetTenants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetTenants(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.DefaultAPI.GetUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GetUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.GetUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndexPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndexPost(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndexPostWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultAPI.IndexPostWithId(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndexPutWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultAPI.IndexPutWithId(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesAddBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var block string

		httpRes, err := apiClient.DefaultAPI.IndicesAddBlock(context.Background(), index, block).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesAnalyzeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesAnalyzeGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesAnalyzeGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesAnalyzeGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesAnalyzePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesAnalyzePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesAnalyzePostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesAnalyzePostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesClearCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesClearCache(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesClearCacheWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesClearCacheWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesClonePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultAPI.IndicesClonePost(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesClonePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultAPI.IndicesClonePut(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesClose", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesClose(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultAPI.IndicesCreate(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesCreateDataStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.DefaultAPI.IndicesCreateDataStream(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesDataStreamsStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesDataStreamsStats(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesDataStreamsStatsWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesDataStreamsStatsWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultAPI.IndicesDelete(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesDeleteAlias", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesDeleteAlias(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesDeleteAliasPlural", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesDeleteAliasPlural(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesDeleteDataStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.DefaultAPI.IndicesDeleteDataStream(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesDeleteIndexTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesDeleteIndexTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesDeleteTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesDeleteTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesExists(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesExistsAlias", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesExistsAlias(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesExistsAliasWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesExistsAliasWithIndex(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesExistsIndexTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesExistsIndexTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesExistsTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesExistsTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesFlushGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesFlushGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesFlushGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesFlushGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesFlushPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesFlushPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesFlushPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesFlushPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesForcemerge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesForcemerge(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesForcemergeWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesForcemergeWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesGet(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetAlias", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesGetAlias(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetAliasWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesGetAliasWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetAliasWithIndexName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesGetAliasWithIndexName(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetAliasWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesGetAliasWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetDataStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.IndicesGetDataStream(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetDataStreamWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.DefaultAPI.IndicesGetDataStreamWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetFieldMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fields string

		httpRes, err := apiClient.DefaultAPI.IndicesGetFieldMapping(context.Background(), fields).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetFieldMappingWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var fields string

		httpRes, err := apiClient.DefaultAPI.IndicesGetFieldMappingWithIndex(context.Background(), index, fields).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetIndexTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesGetIndexTemplate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetIndexTemplateWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesGetIndexTemplateWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesGetMapping(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetMappingWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesGetMappingWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesGetSettings(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetSettingsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesGetSettingsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetSettingsWithIndexName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesGetSettingsWithIndexName(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetSettingsWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesGetSettingsWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesGetTemplate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetTemplateWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesGetTemplateWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesGetUpgrade(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesGetUpgradeWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesGetUpgradeWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesOpen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesOpen(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutAliasPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesPutAliasPost(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutAliasPostPlural", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesPutAliasPostPlural(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutAliasPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesPutAliasPut(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutAliasPutPlural", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesPutAliasPutPlural(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutIndexTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesPutIndexTemplatePost(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutIndexTemplatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesPutIndexTemplatePut(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutMappingPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultAPI.IndicesPutMappingPost(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutMappingPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultAPI.IndicesPutMappingPut(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesPutSettings(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutSettingsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesPutSettingsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesPutTemplatePost(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesPutTemplatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesPutTemplatePut(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesRecovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesRecovery(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesRecoveryWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesRecoveryWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesRefreshGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesRefreshGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesRefreshGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesRefreshGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesRefreshPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesRefreshPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesRefreshPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesRefreshPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesResolveIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesResolveIndex(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesRollover", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alias string

		httpRes, err := apiClient.DefaultAPI.IndicesRollover(context.Background(), alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesRolloverWithNewIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alias string
		var newIndex string

		httpRes, err := apiClient.DefaultAPI.IndicesRolloverWithNewIndex(context.Background(), alias, newIndex).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesSegments(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesSegmentsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesSegmentsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesShardStores", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesShardStores(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesShardStoresWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesShardStoresWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesShrinkPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultAPI.IndicesShrinkPost(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesShrinkPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultAPI.IndicesShrinkPut(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesSimulateIndexTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesSimulateIndexTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesSimulateTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesSimulateTemplate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesSimulateTemplateWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultAPI.IndicesSimulateTemplateWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesSplitPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultAPI.IndicesSplitPost(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesSplitPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultAPI.IndicesSplitPut(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesStats(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesStatsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesStatsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesStatsWithIndexMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var metric string

		httpRes, err := apiClient.DefaultAPI.IndicesStatsWithIndexMetric(context.Background(), index, metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesStatsWithMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string

		httpRes, err := apiClient.DefaultAPI.IndicesStatsWithMetric(context.Background(), metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesUpdateAliases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.IndicesUpdateAliases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesUpgrade(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesUpgradeWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesUpgradeWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesValidateQueryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesValidateQueryGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesValidateQueryGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesValidateQueryGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesValidateQueryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IndicesValidateQueryPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IndicesValidateQueryPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.IndicesValidateQueryPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Info", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.Info(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IngestDeletePipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.IngestDeletePipeline(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IngestGetPipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IngestGetPipeline(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IngestGetPipelineWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.IngestGetPipelineWithId(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IngestProcessorGrok", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IngestProcessorGrok(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IngestPutPipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.IngestPutPipeline(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IngestSimulateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IngestSimulateGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IngestSimulateGetWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.IngestSimulateGetWithId(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IngestSimulatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.IngestSimulatePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IngestSimulatePostWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.IngestSimulatePostWithId(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MgetGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MgetGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MgetGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.MgetGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MgetPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MgetPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MgetPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.MgetPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MsearchGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MsearchGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MsearchGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.MsearchGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MsearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MsearchPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MsearchPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.MsearchPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MsearchTemplateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MsearchTemplateGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MsearchTemplateGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.MsearchTemplateGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MsearchTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MsearchTemplatePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MsearchTemplatePostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.MsearchTemplatePostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MtermvectorsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MtermvectorsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MtermvectorsGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.MtermvectorsGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MtermvectorsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.MtermvectorsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService MtermvectorsPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.MtermvectorsPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesHotThreads", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesHotThreads(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesHotThreadsDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesHotThreadsDeprecated(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesHotThreadsDeprecatedCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesHotThreadsDeprecatedCluster(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesHotThreadsDeprecatedDash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesHotThreadsDeprecatedDash(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesHotThreadsWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultAPI.NodesHotThreadsWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesHotThreadsWithNodeIdDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultAPI.NodesHotThreadsWithNodeIdDeprecated(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesHotThreadsWithNodeIdDeprecatedCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultAPI.NodesHotThreadsWithNodeIdDeprecatedCluster(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesHotThreadsWithNodeIdDeprecatedDash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultAPI.NodesHotThreadsWithNodeIdDeprecatedDash(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesInfo(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesInfoWithMetricNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string
		var metric string

		httpRes, err := apiClient.DefaultAPI.NodesInfoWithMetricNodeId(context.Background(), nodeId, metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesInfoWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultAPI.NodesInfoWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesReloadSecureSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesReloadSecureSettings(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesReloadSecureSettingsWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultAPI.NodesReloadSecureSettingsWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesStats(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesStatsWithIndexMetricMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string
		var indexMetric string

		httpRes, err := apiClient.DefaultAPI.NodesStatsWithIndexMetricMetric(context.Background(), metric, indexMetric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesStatsWithIndexMetricMetricNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string
		var indexMetric string
		var nodeId string

		httpRes, err := apiClient.DefaultAPI.NodesStatsWithIndexMetricMetricNodeId(context.Background(), metric, indexMetric, nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesStatsWithMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string

		httpRes, err := apiClient.DefaultAPI.NodesStatsWithMetric(context.Background(), metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesStatsWithMetricNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string
		var nodeId string

		httpRes, err := apiClient.DefaultAPI.NodesStatsWithMetricNodeId(context.Background(), metric, nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesStatsWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultAPI.NodesStatsWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.NodesUsage(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesUsageWithMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string

		httpRes, err := apiClient.DefaultAPI.NodesUsageWithMetric(context.Background(), metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesUsageWithMetricNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string
		var nodeId string

		httpRes, err := apiClient.DefaultAPI.NodesUsageWithMetricNodeId(context.Background(), metric, nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService NodesUsageWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultAPI.NodesUsageWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchActionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionGroup string

		resp, httpRes, err := apiClient.DefaultAPI.PatchActionGroup(context.Background(), actionGroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchActionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.PatchActionGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchAuditConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.PatchAuditConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.PatchConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchDistinguishedNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.PatchDistinguishedNames(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultAPI.PatchRole(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchRoleMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultAPI.PatchRoleMapping(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchRoleMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.PatchRoleMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.PatchRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.DefaultAPI.PatchTenant(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchTenants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.PatchTenants(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.DefaultAPI.PatchUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PatchUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.PatchUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Ping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.Ping(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PutScriptPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.PutScriptPost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PutScriptPostWithContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var context string

		httpRes, err := apiClient.DefaultAPI.PutScriptPostWithContext(context.Background(), id, context).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PutScriptPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.PutScriptPut(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PutScriptPutWithContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var context string

		httpRes, err := apiClient.DefaultAPI.PutScriptPutWithContext(context.Background(), id, context).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RankEvalGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.RankEvalGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RankEvalGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.RankEvalGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RankEvalPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.RankEvalPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RankEvalPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.RankEvalPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Reindex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.Reindex(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ReindexRethrottle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.ReindexRethrottle(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ReloadHttpCertificates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ReloadHttpCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ReloadTransportCertificates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ReloadTransportCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RemoteStoreRestore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.RemoteStoreRestore(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RenderSearchTemplateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.RenderSearchTemplateGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RenderSearchTemplateGetWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.RenderSearchTemplateGetWithId(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RenderSearchTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.RenderSearchTemplatePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RenderSearchTemplatePostWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultAPI.RenderSearchTemplatePostWithId(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScriptsPainlessExecuteGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ScriptsPainlessExecuteGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScriptsPainlessExecutePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ScriptsPainlessExecutePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScrollGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ScrollGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScrollGetWithScrollId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scrollId string

		httpRes, err := apiClient.DefaultAPI.ScrollGetWithScrollId(context.Background(), scrollId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScrollPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.ScrollPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ScrollPostWithScrollId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scrollId string

		httpRes, err := apiClient.DefaultAPI.ScrollPostWithScrollId(context.Background(), scrollId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.SearchGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultAPI.SearchGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.SearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultAPI.SearchPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchShardsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.SearchShardsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchShardsGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.SearchShardsGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchShardsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.SearchShardsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchShardsPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.SearchShardsPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchTemplateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.SearchTemplateGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchTemplateGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.SearchTemplateGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.SearchTemplatePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SearchTemplatePostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.SearchTemplatePostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SecurityHealth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.SecurityHealth(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotCleanupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultAPI.SnapshotCleanupRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotClone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string
		var targetSnapshot string

		httpRes, err := apiClient.DefaultAPI.SnapshotClone(context.Background(), repository, snapshot, targetSnapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotCreatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultAPI.SnapshotCreatePost(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotCreatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultAPI.SnapshotCreatePut(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotCreateRepositoryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultAPI.SnapshotCreateRepositoryPost(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotCreateRepositoryPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultAPI.SnapshotCreateRepositoryPut(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultAPI.SnapshotDelete(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotDeleteRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultAPI.SnapshotDeleteRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultAPI.SnapshotGet(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotGetRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.SnapshotGetRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotGetRepositoryWithRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultAPI.SnapshotGetRepositoryWithRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotRestore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultAPI.SnapshotRestore(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.SnapshotStatus(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotStatusWithRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultAPI.SnapshotStatusWithRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotStatusWithRepositorySnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultAPI.SnapshotStatusWithRepositorySnapshot(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SnapshotVerifyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultAPI.SnapshotVerifyRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TasksCancel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.TasksCancel(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TasksCancelWithTaskId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.TasksCancelWithTaskId(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TasksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.TasksGet(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TasksList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultAPI.TasksList(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TermvectorsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.TermvectorsGet(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TermvectorsGetWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var id string

		httpRes, err := apiClient.DefaultAPI.TermvectorsGetWithId(context.Background(), index, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TermvectorsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.TermvectorsPost(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService TermvectorsPostWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var id string

		httpRes, err := apiClient.DefaultAPI.TermvectorsPostWithId(context.Background(), index, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Update", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultAPI.Update(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateAuditConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.UpdateAuditConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateByQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultAPI.UpdateByQuery(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateByQueryRethrottle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultAPI.UpdateByQueryRethrottle(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.UpdateConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService UpdateDistinguishedNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.DefaultAPI.UpdateDistinguishedNames(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
