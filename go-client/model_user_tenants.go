/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
)

// checks if the UserTenants type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserTenants{}

// UserTenants struct for UserTenants
type UserTenants struct {
	GlobalTenant *bool `json:"global_tenant,omitempty"`
	AdminTenant *bool `json:"admin_tenant,omitempty"`
	Admin *bool `json:"admin,omitempty"`
}

// NewUserTenants instantiates a new UserTenants object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTenants() *UserTenants {
	this := UserTenants{}
	return &this
}

// NewUserTenantsWithDefaults instantiates a new UserTenants object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTenantsWithDefaults() *UserTenants {
	this := UserTenants{}
	return &this
}

// GetGlobalTenant returns the GlobalTenant field value if set, zero value otherwise.
func (o *UserTenants) GetGlobalTenant() bool {
	if o == nil || IsNil(o.GlobalTenant) {
		var ret bool
		return ret
	}
	return *o.GlobalTenant
}

// GetGlobalTenantOk returns a tuple with the GlobalTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTenants) GetGlobalTenantOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalTenant) {
		return nil, false
	}
	return o.GlobalTenant, true
}

// HasGlobalTenant returns a boolean if a field has been set.
func (o *UserTenants) HasGlobalTenant() bool {
	if o != nil && !IsNil(o.GlobalTenant) {
		return true
	}

	return false
}

// SetGlobalTenant gets a reference to the given bool and assigns it to the GlobalTenant field.
func (o *UserTenants) SetGlobalTenant(v bool) {
	o.GlobalTenant = &v
}

// GetAdminTenant returns the AdminTenant field value if set, zero value otherwise.
func (o *UserTenants) GetAdminTenant() bool {
	if o == nil || IsNil(o.AdminTenant) {
		var ret bool
		return ret
	}
	return *o.AdminTenant
}

// GetAdminTenantOk returns a tuple with the AdminTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTenants) GetAdminTenantOk() (*bool, bool) {
	if o == nil || IsNil(o.AdminTenant) {
		return nil, false
	}
	return o.AdminTenant, true
}

// HasAdminTenant returns a boolean if a field has been set.
func (o *UserTenants) HasAdminTenant() bool {
	if o != nil && !IsNil(o.AdminTenant) {
		return true
	}

	return false
}

// SetAdminTenant gets a reference to the given bool and assigns it to the AdminTenant field.
func (o *UserTenants) SetAdminTenant(v bool) {
	o.AdminTenant = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *UserTenants) GetAdmin() bool {
	if o == nil || IsNil(o.Admin) {
		var ret bool
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTenants) GetAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *UserTenants) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given bool and assigns it to the Admin field.
func (o *UserTenants) SetAdmin(v bool) {
	o.Admin = &v
}

func (o UserTenants) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserTenants) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GlobalTenant) {
		toSerialize["global_tenant"] = o.GlobalTenant
	}
	if !IsNil(o.AdminTenant) {
		toSerialize["admin_tenant"] = o.AdminTenant
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableUserTenants struct {
	value *UserTenants
	isSet bool
}

func (v NullableUserTenants) Get() *UserTenants {
	return v.value
}

func (v *NullableUserTenants) Set(val *UserTenants) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTenants) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTenants) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTenants(val *UserTenants) *NullableUserTenants {
	return &NullableUserTenants{value: val, isSet: true}
}

func (v NullableUserTenants) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTenants) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


