/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
	"fmt"
)

// Conflicts What to do when the operation encounters version conflicts?.
type Conflicts string

// List of Conflicts
const (
	ABORT Conflicts = "abort"
	PROCEED Conflicts = "proceed"
)

// All allowed values of Conflicts enum
var AllowedConflictsEnumValues = []Conflicts{
	"abort",
	"proceed",
}

func (v *Conflicts) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Conflicts(value)
	for _, existing := range AllowedConflictsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Conflicts", value)
}

// NewConflictsFromValue returns a pointer to a valid Conflicts
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConflictsFromValue(v string) (*Conflicts, error) {
	ev := Conflicts(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Conflicts: valid values are %v", v, AllowedConflictsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Conflicts) IsValid() bool {
	for _, existing := range AllowedConflictsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Conflicts value
func (v Conflicts) Ptr() *Conflicts {
	return &v
}

type NullableConflicts struct {
	value *Conflicts
	isSet bool
}

func (v NullableConflicts) Get() *Conflicts {
	return v.value
}

func (v *NullableConflicts) Set(val *Conflicts) {
	v.value = val
	v.isSet = true
}

func (v NullableConflicts) IsSet() bool {
	return v.isSet
}

func (v *NullableConflicts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConflicts(val *Conflicts) *NullableConflicts {
	return &NullableConflicts{value: val, isSet: true}
}

func (v NullableConflicts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConflicts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

