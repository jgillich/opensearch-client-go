/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
)

// checks if the RoleMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleMapping{}

// RoleMapping struct for RoleMapping
type RoleMapping struct {
	Hosts []string `json:"hosts,omitempty"`
	Users []string `json:"users,omitempty"`
	Reserved *bool `json:"reserved,omitempty"`
	Hidden *bool `json:"hidden,omitempty"`
	BackendRoles []string `json:"backend_roles,omitempty"`
	AndBackendRoles []string `json:"and_backend_roles,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewRoleMapping instantiates a new RoleMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleMapping() *RoleMapping {
	this := RoleMapping{}
	return &this
}

// NewRoleMappingWithDefaults instantiates a new RoleMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleMappingWithDefaults() *RoleMapping {
	this := RoleMapping{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *RoleMapping) GetHosts() []string {
	if o == nil || IsNil(o.Hosts) {
		var ret []string
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMapping) GetHostsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *RoleMapping) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []string and assigns it to the Hosts field.
func (o *RoleMapping) SetHosts(v []string) {
	o.Hosts = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *RoleMapping) GetUsers() []string {
	if o == nil || IsNil(o.Users) {
		var ret []string
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMapping) GetUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *RoleMapping) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []string and assigns it to the Users field.
func (o *RoleMapping) SetUsers(v []string) {
	o.Users = v
}

// GetReserved returns the Reserved field value if set, zero value otherwise.
func (o *RoleMapping) GetReserved() bool {
	if o == nil || IsNil(o.Reserved) {
		var ret bool
		return ret
	}
	return *o.Reserved
}

// GetReservedOk returns a tuple with the Reserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMapping) GetReservedOk() (*bool, bool) {
	if o == nil || IsNil(o.Reserved) {
		return nil, false
	}
	return o.Reserved, true
}

// HasReserved returns a boolean if a field has been set.
func (o *RoleMapping) HasReserved() bool {
	if o != nil && !IsNil(o.Reserved) {
		return true
	}

	return false
}

// SetReserved gets a reference to the given bool and assigns it to the Reserved field.
func (o *RoleMapping) SetReserved(v bool) {
	o.Reserved = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *RoleMapping) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMapping) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *RoleMapping) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *RoleMapping) SetHidden(v bool) {
	o.Hidden = &v
}

// GetBackendRoles returns the BackendRoles field value if set, zero value otherwise.
func (o *RoleMapping) GetBackendRoles() []string {
	if o == nil || IsNil(o.BackendRoles) {
		var ret []string
		return ret
	}
	return o.BackendRoles
}

// GetBackendRolesOk returns a tuple with the BackendRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMapping) GetBackendRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.BackendRoles) {
		return nil, false
	}
	return o.BackendRoles, true
}

// HasBackendRoles returns a boolean if a field has been set.
func (o *RoleMapping) HasBackendRoles() bool {
	if o != nil && !IsNil(o.BackendRoles) {
		return true
	}

	return false
}

// SetBackendRoles gets a reference to the given []string and assigns it to the BackendRoles field.
func (o *RoleMapping) SetBackendRoles(v []string) {
	o.BackendRoles = v
}

// GetAndBackendRoles returns the AndBackendRoles field value if set, zero value otherwise.
func (o *RoleMapping) GetAndBackendRoles() []string {
	if o == nil || IsNil(o.AndBackendRoles) {
		var ret []string
		return ret
	}
	return o.AndBackendRoles
}

// GetAndBackendRolesOk returns a tuple with the AndBackendRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMapping) GetAndBackendRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.AndBackendRoles) {
		return nil, false
	}
	return o.AndBackendRoles, true
}

// HasAndBackendRoles returns a boolean if a field has been set.
func (o *RoleMapping) HasAndBackendRoles() bool {
	if o != nil && !IsNil(o.AndBackendRoles) {
		return true
	}

	return false
}

// SetAndBackendRoles gets a reference to the given []string and assigns it to the AndBackendRoles field.
func (o *RoleMapping) SetAndBackendRoles(v []string) {
	o.AndBackendRoles = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoleMapping) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleMapping) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoleMapping) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoleMapping) SetDescription(v string) {
	o.Description = &v
}

func (o RoleMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Reserved) {
		toSerialize["reserved"] = o.Reserved
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.BackendRoles) {
		toSerialize["backend_roles"] = o.BackendRoles
	}
	if !IsNil(o.AndBackendRoles) {
		toSerialize["and_backend_roles"] = o.AndBackendRoles
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableRoleMapping struct {
	value *RoleMapping
	isSet bool
}

func (v NullableRoleMapping) Get() *RoleMapping {
	return v.value
}

func (v *NullableRoleMapping) Set(val *RoleMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleMapping(val *RoleMapping) *NullableRoleMapping {
	return &NullableRoleMapping{value: val, isSet: true}
}

func (v NullableRoleMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


