/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
)

// checks if the ShardStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShardStatistics{}

// ShardStatistics struct for ShardStatistics
type ShardStatistics struct {
	Total *int32 `json:"total,omitempty"`
	Successful *int32 `json:"successful,omitempty"`
	Skipped *int32 `json:"skipped,omitempty"`
	Failed *int32 `json:"failed,omitempty"`
}

// NewShardStatistics instantiates a new ShardStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShardStatistics() *ShardStatistics {
	this := ShardStatistics{}
	return &this
}

// NewShardStatisticsWithDefaults instantiates a new ShardStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShardStatisticsWithDefaults() *ShardStatistics {
	this := ShardStatistics{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ShardStatistics) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShardStatistics) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ShardStatistics) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *ShardStatistics) SetTotal(v int32) {
	o.Total = &v
}

// GetSuccessful returns the Successful field value if set, zero value otherwise.
func (o *ShardStatistics) GetSuccessful() int32 {
	if o == nil || IsNil(o.Successful) {
		var ret int32
		return ret
	}
	return *o.Successful
}

// GetSuccessfulOk returns a tuple with the Successful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShardStatistics) GetSuccessfulOk() (*int32, bool) {
	if o == nil || IsNil(o.Successful) {
		return nil, false
	}
	return o.Successful, true
}

// HasSuccessful returns a boolean if a field has been set.
func (o *ShardStatistics) HasSuccessful() bool {
	if o != nil && !IsNil(o.Successful) {
		return true
	}

	return false
}

// SetSuccessful gets a reference to the given int32 and assigns it to the Successful field.
func (o *ShardStatistics) SetSuccessful(v int32) {
	o.Successful = &v
}

// GetSkipped returns the Skipped field value if set, zero value otherwise.
func (o *ShardStatistics) GetSkipped() int32 {
	if o == nil || IsNil(o.Skipped) {
		var ret int32
		return ret
	}
	return *o.Skipped
}

// GetSkippedOk returns a tuple with the Skipped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShardStatistics) GetSkippedOk() (*int32, bool) {
	if o == nil || IsNil(o.Skipped) {
		return nil, false
	}
	return o.Skipped, true
}

// HasSkipped returns a boolean if a field has been set.
func (o *ShardStatistics) HasSkipped() bool {
	if o != nil && !IsNil(o.Skipped) {
		return true
	}

	return false
}

// SetSkipped gets a reference to the given int32 and assigns it to the Skipped field.
func (o *ShardStatistics) SetSkipped(v int32) {
	o.Skipped = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *ShardStatistics) GetFailed() int32 {
	if o == nil || IsNil(o.Failed) {
		var ret int32
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShardStatistics) GetFailedOk() (*int32, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *ShardStatistics) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given int32 and assigns it to the Failed field.
func (o *ShardStatistics) SetFailed(v int32) {
	o.Failed = &v
}

func (o ShardStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShardStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.Successful) {
		toSerialize["successful"] = o.Successful
	}
	if !IsNil(o.Skipped) {
		toSerialize["skipped"] = o.Skipped
	}
	if !IsNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	return toSerialize, nil
}

type NullableShardStatistics struct {
	value *ShardStatistics
	isSet bool
}

func (v NullableShardStatistics) Get() *ShardStatistics {
	return v.value
}

func (v *NullableShardStatistics) Set(val *ShardStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableShardStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableShardStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShardStatistics(val *ShardStatistics) *NullableShardStatistics {
	return &NullableShardStatistics{value: val, isSet: true}
}

func (v NullableShardStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShardStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


