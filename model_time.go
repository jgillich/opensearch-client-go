/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Time The unit in which to display time values.
type Time string

// List of Time
const (
	D Time = "d"
	H Time = "h"
	M Time = "m"
	S Time = "s"
	MS Time = "ms"
	MICROS Time = "micros"
	NANOS Time = "nanos"
)

// All allowed values of Time enum
var AllowedTimeEnumValues = []Time{
	"d",
	"h",
	"m",
	"s",
	"ms",
	"micros",
	"nanos",
}

func (v *Time) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Time(value)
	for _, existing := range AllowedTimeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Time", value)
}

// NewTimeFromValue returns a pointer to a valid Time
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeFromValue(v string) (*Time, error) {
	ev := Time(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Time: valid values are %v", v, AllowedTimeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Time) IsValid() bool {
	for _, existing := range AllowedTimeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Time value
func (v Time) Ptr() *Time {
	return &v
}

type NullableTime struct {
	value *Time
	isSet bool
}

func (v NullableTime) Get() *Time {
	return v.value
}

func (v *NullableTime) Set(val *Time) {
	v.value = val
	v.isSet = true
}

func (v NullableTime) IsSet() bool {
	return v.isSet
}

func (v *NullableTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTime(val *Time) *NullableTime {
	return &NullableTime{value: val, isSet: true}
}

func (v NullableTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

