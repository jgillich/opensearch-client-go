/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PitsDetailsDeleteAll type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PitsDetailsDeleteAll{}

// PitsDetailsDeleteAll struct for PitsDetailsDeleteAll
type PitsDetailsDeleteAll struct {
	Successful *bool `json:"successful,omitempty"`
	PitId *string `json:"pit_id,omitempty"`
}

// NewPitsDetailsDeleteAll instantiates a new PitsDetailsDeleteAll object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPitsDetailsDeleteAll() *PitsDetailsDeleteAll {
	this := PitsDetailsDeleteAll{}
	return &this
}

// NewPitsDetailsDeleteAllWithDefaults instantiates a new PitsDetailsDeleteAll object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPitsDetailsDeleteAllWithDefaults() *PitsDetailsDeleteAll {
	this := PitsDetailsDeleteAll{}
	return &this
}

// GetSuccessful returns the Successful field value if set, zero value otherwise.
func (o *PitsDetailsDeleteAll) GetSuccessful() bool {
	if o == nil || IsNil(o.Successful) {
		var ret bool
		return ret
	}
	return *o.Successful
}

// GetSuccessfulOk returns a tuple with the Successful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PitsDetailsDeleteAll) GetSuccessfulOk() (*bool, bool) {
	if o == nil || IsNil(o.Successful) {
		return nil, false
	}
	return o.Successful, true
}

// HasSuccessful returns a boolean if a field has been set.
func (o *PitsDetailsDeleteAll) HasSuccessful() bool {
	if o != nil && !IsNil(o.Successful) {
		return true
	}

	return false
}

// SetSuccessful gets a reference to the given bool and assigns it to the Successful field.
func (o *PitsDetailsDeleteAll) SetSuccessful(v bool) {
	o.Successful = &v
}

// GetPitId returns the PitId field value if set, zero value otherwise.
func (o *PitsDetailsDeleteAll) GetPitId() string {
	if o == nil || IsNil(o.PitId) {
		var ret string
		return ret
	}
	return *o.PitId
}

// GetPitIdOk returns a tuple with the PitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PitsDetailsDeleteAll) GetPitIdOk() (*string, bool) {
	if o == nil || IsNil(o.PitId) {
		return nil, false
	}
	return o.PitId, true
}

// HasPitId returns a boolean if a field has been set.
func (o *PitsDetailsDeleteAll) HasPitId() bool {
	if o != nil && !IsNil(o.PitId) {
		return true
	}

	return false
}

// SetPitId gets a reference to the given string and assigns it to the PitId field.
func (o *PitsDetailsDeleteAll) SetPitId(v string) {
	o.PitId = &v
}

func (o PitsDetailsDeleteAll) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PitsDetailsDeleteAll) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Successful) {
		toSerialize["successful"] = o.Successful
	}
	if !IsNil(o.PitId) {
		toSerialize["pit_id"] = o.PitId
	}
	return toSerialize, nil
}

type NullablePitsDetailsDeleteAll struct {
	value *PitsDetailsDeleteAll
	isSet bool
}

func (v NullablePitsDetailsDeleteAll) Get() *PitsDetailsDeleteAll {
	return v.value
}

func (v *NullablePitsDetailsDeleteAll) Set(val *PitsDetailsDeleteAll) {
	v.value = val
	v.isSet = true
}

func (v NullablePitsDetailsDeleteAll) IsSet() bool {
	return v.isSet
}

func (v *NullablePitsDetailsDeleteAll) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePitsDetailsDeleteAll(val *PitsDetailsDeleteAll) *NullablePitsDetailsDeleteAll {
	return &NullablePitsDetailsDeleteAll{value: val, isSet: true}
}

func (v NullablePitsDetailsDeleteAll) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePitsDetailsDeleteAll) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


