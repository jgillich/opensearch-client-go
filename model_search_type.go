/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SearchType Search operation type.
type SearchType string

// List of SearchType
const (
	QUERY_THEN_FETCH SearchType = "query_then_fetch"
	DFS_QUERY_THEN_FETCH SearchType = "dfs_query_then_fetch"
)

// All allowed values of SearchType enum
var AllowedSearchTypeEnumValues = []SearchType{
	"query_then_fetch",
	"dfs_query_then_fetch",
}

func (v *SearchType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchType(value)
	for _, existing := range AllowedSearchTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchType", value)
}

// NewSearchTypeFromValue returns a pointer to a valid SearchType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchTypeFromValue(v string) (*SearchType, error) {
	ev := SearchType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchType: valid values are %v", v, AllowedSearchTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchType) IsValid() bool {
	for _, existing := range AllowedSearchTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchType value
func (v SearchType) Ptr() *SearchType {
	return &v
}

type NullableSearchType struct {
	value *SearchType
	isSet bool
}

func (v NullableSearchType) Get() *SearchType {
	return v.value
}

func (v *NullableSearchType) Set(val *SearchType) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchType) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchType(val *SearchType) *NullableSearchType {
	return &NullableSearchType{value: val, isSet: true}
}

func (v NullableSearchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

