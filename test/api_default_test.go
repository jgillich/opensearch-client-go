/*
OpenSearch

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService BulkPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.BulkPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService BulkPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.BulkPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService BulkPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.BulkPut(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService BulkPutWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.BulkPutWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatAliases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatAliases(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatAliasesWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.CatAliasesWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatAllPitSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CatAllPitSegments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatAllocation(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatAllocationWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultApi.CatAllocationWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatClusterManager", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatClusterManager(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatCount(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatCountWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.CatCountWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatFielddata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatFielddata(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatFielddataWithFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fields string

		httpRes, err := apiClient.DefaultApi.CatFielddataWithFields(context.Background(), fields).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatHealth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatHealth(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatHelp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatHelp(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatIndices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatIndices(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatIndicesWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.CatIndicesWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatMaster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatMaster(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatNodeattrs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatNodeattrs(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatNodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatNodes(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatPendingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatPendingTasks(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatPitSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.CatPitSegments(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatPlugins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatPlugins(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatRecovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatRecovery(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatRecoveryWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.CatRecoveryWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatRepositories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatRepositories(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatSegmentReplication", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatSegmentReplication(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatSegmentReplicationWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.CatSegmentReplicationWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatSegments(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatSegmentsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.CatSegmentsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatShards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatShards(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatShardsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.CatShardsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatSnapshots(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatSnapshotsWithRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultApi.CatSnapshotsWithRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatTasks(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatTemplates(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatTemplatesWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.CatTemplatesWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatThreadPool", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CatThreadPool(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CatThreadPoolWithThreadPoolPatterns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var threadPoolPatterns string

		httpRes, err := apiClient.DefaultApi.CatThreadPoolWithThreadPoolPatterns(context.Background(), threadPoolPatterns).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ChangePassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ChangePassword(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClearScroll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClearScroll(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClearScrollWithScrollId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scrollId string

		httpRes, err := apiClient.DefaultApi.ClearScrollWithScrollId(context.Background(), scrollId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterAllocationExplainGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterAllocationExplainGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterAllocationExplainPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterAllocationExplainPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterDeleteComponentTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.ClusterDeleteComponentTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterDeleteDecommissionAwareness", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterDeleteDecommissionAwareness(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterDeleteVotingConfigExclusions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterDeleteVotingConfigExclusions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterDeleteWeightedRouting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterDeleteWeightedRouting(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterExistsComponentTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.ClusterExistsComponentTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterGetComponentTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterGetComponentTemplate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterGetComponentTemplateWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.ClusterGetComponentTemplateWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterGetDecommissionAwareness", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var awarenessAttributeName string

		httpRes, err := apiClient.DefaultApi.ClusterGetDecommissionAwareness(context.Background(), awarenessAttributeName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterGetSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ClusterGetSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterGetWeightedRouting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attribute string

		httpRes, err := apiClient.DefaultApi.ClusterGetWeightedRouting(context.Background(), attribute).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterHealth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterHealth(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterHealthWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.ClusterHealthWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterPendingTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterPendingTasks(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterPostVotingConfigExclusions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterPostVotingConfigExclusions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterPutComponentTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.ClusterPutComponentTemplatePost(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterPutComponentTemplatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.ClusterPutComponentTemplatePut(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterPutDecommissionAwareness", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var awarenessAttributeName string
		var awarenessAttributeValue string

		httpRes, err := apiClient.DefaultApi.ClusterPutDecommissionAwareness(context.Background(), awarenessAttributeName, awarenessAttributeValue).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterPutSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ClusterPutSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterPutWeightedRouting", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var attribute string

		httpRes, err := apiClient.DefaultApi.ClusterPutWeightedRouting(context.Background(), attribute).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterRemoteInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterRemoteInfo(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterReroute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterReroute(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterState(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterStateWithIndexMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var metric string

		httpRes, err := apiClient.DefaultApi.ClusterStateWithIndexMetric(context.Background(), index, metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterStateWithMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string

		httpRes, err := apiClient.DefaultApi.ClusterStateWithMetric(context.Background(), metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ClusterStats(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ClusterStatsWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultApi.ClusterStatsWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CountGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CountGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.CountGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CountPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.CountPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CountPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.CountPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateActionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionGroup string

		resp, httpRes, err := apiClient.DefaultApi.CreateActionGroup(context.Background(), actionGroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreatePit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultApi.CreatePit(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultApi.CreatePost(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultApi.CreatePut(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultApi.CreateRole(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateRoleMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultApi.CreateRoleMapping(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.DefaultApi.CreateTenant(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.DefaultApi.CreateUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DanglingIndicesDeleteDanglingIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexUuid string

		httpRes, err := apiClient.DefaultApi.DanglingIndicesDeleteDanglingIndex(context.Background(), indexUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DanglingIndicesImportDanglingIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var indexUuid string

		httpRes, err := apiClient.DefaultApi.DanglingIndicesImportDanglingIndex(context.Background(), indexUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DanglingIndicesListDanglingIndices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.DanglingIndicesListDanglingIndices(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService Delete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultApi.Delete(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteActionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionGroup string

		resp, httpRes, err := apiClient.DefaultApi.DeleteActionGroup(context.Background(), actionGroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteAllPits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.DeleteAllPits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteByQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.DeleteByQuery(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteByQueryRethrottle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultApi.DeleteByQueryRethrottle(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteDistinguishedNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.DefaultApi.DeleteDistinguishedNames(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeletePit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.DeletePit(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultApi.DeleteRole(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteRoleMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultApi.DeleteRoleMapping(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteScript", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.DeleteScript(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.DefaultApi.DeleteTenant(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.DefaultApi.DeleteUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService Exists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultApi.Exists(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ExistsSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultApi.ExistsSource(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ExplainGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultApi.ExplainGet(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ExplainPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultApi.ExplainPost(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService FieldCapsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.FieldCapsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService FieldCapsGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.FieldCapsGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService FieldCapsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.FieldCapsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService FieldCapsPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.FieldCapsPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService FlushCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.FlushCache(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService Get", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		resp, httpRes, err := apiClient.DefaultApi.Get(context.Background(), id, index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAccountDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetAccountDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetActionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionGroup string

		resp, httpRes, err := apiClient.DefaultApi.GetActionGroup(context.Background(), actionGroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetActionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetActionGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAllPits", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetAllPits(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetAuditConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetAuditConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetCertificates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetDistinguishedNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetDistinguishedNames(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetDistinguishedNamesWithClusterName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.DefaultApi.GetDistinguishedNamesWithClusterName(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultApi.GetRole(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetRoleMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultApi.GetRoleMapping(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetRoleMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetRoleMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetScript", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.GetScript(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetScriptContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.GetScriptContext(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetScriptLanguages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.GetScriptLanguages(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetSource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultApi.GetSource(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.DefaultApi.GetTenant(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetTenants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetTenants(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.DefaultApi.GetUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndexPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndexPost(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndexPostWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultApi.IndexPostWithId(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndexPutWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultApi.IndexPutWithId(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesAddBlock", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var block string

		httpRes, err := apiClient.DefaultApi.IndicesAddBlock(context.Background(), index, block).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesAnalyzeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesAnalyzeGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesAnalyzeGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesAnalyzeGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesAnalyzePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesAnalyzePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesAnalyzePostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesAnalyzePostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesClearCache", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesClearCache(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesClearCacheWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesClearCacheWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesClonePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultApi.IndicesClonePost(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesClonePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultApi.IndicesClonePut(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesClose", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesClose(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultApi.IndicesCreate(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesCreateDataStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.DefaultApi.IndicesCreateDataStream(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesDataStreamsStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesDataStreamsStats(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesDataStreamsStatsWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesDataStreamsStatsWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultApi.IndicesDelete(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesDeleteAlias", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultApi.IndicesDeleteAlias(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesDeleteAliasPlural", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultApi.IndicesDeleteAliasPlural(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesDeleteDataStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.DefaultApi.IndicesDeleteDataStream(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesDeleteIndexTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesDeleteIndexTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesDeleteTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesDeleteTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesExists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesExists(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesExistsAlias", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesExistsAlias(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesExistsAliasWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultApi.IndicesExistsAliasWithIndex(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesExistsIndexTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesExistsIndexTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesExistsTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesExistsTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesFlushGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesFlushGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesFlushGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesFlushGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesFlushPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesFlushPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesFlushPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesFlushPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesForcemerge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesForcemerge(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesForcemergeWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesForcemergeWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesGet(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetAlias", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesGetAlias(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetAliasWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesGetAliasWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetAliasWithIndexName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultApi.IndicesGetAliasWithIndexName(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetAliasWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesGetAliasWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetDataStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.IndicesGetDataStream(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetDataStreamWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.DefaultApi.IndicesGetDataStreamWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetFieldMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fields string

		httpRes, err := apiClient.DefaultApi.IndicesGetFieldMapping(context.Background(), fields).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetFieldMappingWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var fields string

		httpRes, err := apiClient.DefaultApi.IndicesGetFieldMappingWithIndex(context.Background(), index, fields).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetIndexTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesGetIndexTemplate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetIndexTemplateWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesGetIndexTemplateWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesGetMapping(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetMappingWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesGetMappingWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesGetSettings(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetSettingsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesGetSettingsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetSettingsWithIndexName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultApi.IndicesGetSettingsWithIndexName(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetSettingsWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesGetSettingsWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesGetTemplate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetTemplateWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesGetTemplateWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesGetUpgrade(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesGetUpgradeWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesGetUpgradeWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesOpen", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesOpen(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutAliasPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultApi.IndicesPutAliasPost(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutAliasPostPlural", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultApi.IndicesPutAliasPostPlural(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutAliasPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultApi.IndicesPutAliasPut(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutAliasPutPlural", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var name string

		httpRes, err := apiClient.DefaultApi.IndicesPutAliasPutPlural(context.Background(), index, name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutIndexTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesPutIndexTemplatePost(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutIndexTemplatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesPutIndexTemplatePut(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutMappingPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultApi.IndicesPutMappingPost(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutMappingPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultApi.IndicesPutMappingPut(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesPutSettings(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutSettingsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesPutSettingsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesPutTemplatePost(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesPutTemplatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesPutTemplatePut(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesRecovery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesRecovery(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesRecoveryWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesRecoveryWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesRefreshGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesRefreshGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesRefreshGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesRefreshGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesRefreshPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesRefreshPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesRefreshPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesRefreshPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesResolveIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesResolveIndex(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesRollover", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alias string

		httpRes, err := apiClient.DefaultApi.IndicesRollover(context.Background(), alias).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesRolloverWithNewIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var alias string
		var newIndex string

		httpRes, err := apiClient.DefaultApi.IndicesRolloverWithNewIndex(context.Background(), alias, newIndex).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesSegments(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesSegmentsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesSegmentsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesShardStores", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesShardStores(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesShardStoresWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesShardStoresWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesShrinkPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultApi.IndicesShrinkPost(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesShrinkPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultApi.IndicesShrinkPut(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesSimulateIndexTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesSimulateIndexTemplate(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesSimulateTemplate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesSimulateTemplate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesSimulateTemplateWithName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		httpRes, err := apiClient.DefaultApi.IndicesSimulateTemplateWithName(context.Background(), name).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesSplitPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultApi.IndicesSplitPost(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesSplitPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var target string

		httpRes, err := apiClient.DefaultApi.IndicesSplitPut(context.Background(), index, target).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesStats(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesStatsWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesStatsWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesStatsWithIndexMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var metric string

		httpRes, err := apiClient.DefaultApi.IndicesStatsWithIndexMetric(context.Background(), index, metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesStatsWithMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string

		httpRes, err := apiClient.DefaultApi.IndicesStatsWithMetric(context.Background(), metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesUpdateAliases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.IndicesUpdateAliases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesUpgrade(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesUpgradeWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesUpgradeWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesValidateQueryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesValidateQueryGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesValidateQueryGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesValidateQueryGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesValidateQueryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IndicesValidateQueryPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IndicesValidateQueryPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.IndicesValidateQueryPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService Info", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.Info(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IngestDeletePipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.IngestDeletePipeline(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IngestGetPipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IngestGetPipeline(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IngestGetPipelineWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.IngestGetPipelineWithId(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IngestProcessorGrok", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IngestProcessorGrok(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IngestPutPipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.IngestPutPipeline(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IngestSimulateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IngestSimulateGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IngestSimulateGetWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.IngestSimulateGetWithId(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IngestSimulatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.IngestSimulatePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService IngestSimulatePostWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.IngestSimulatePostWithId(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MgetGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.MgetGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MgetGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.MgetGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MgetPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.MgetPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MgetPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.MgetPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MsearchGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.MsearchGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MsearchGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.MsearchGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MsearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.MsearchPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MsearchPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.MsearchPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MsearchTemplateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.MsearchTemplateGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MsearchTemplateGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.MsearchTemplateGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MsearchTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.MsearchTemplatePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MsearchTemplatePostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.MsearchTemplatePostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MtermvectorsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.MtermvectorsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MtermvectorsGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.MtermvectorsGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MtermvectorsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.MtermvectorsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService MtermvectorsPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.MtermvectorsPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesHotThreads", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.NodesHotThreads(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesHotThreadsDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.NodesHotThreadsDeprecated(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesHotThreadsDeprecatedCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.NodesHotThreadsDeprecatedCluster(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesHotThreadsDeprecatedDash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.NodesHotThreadsDeprecatedDash(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesHotThreadsWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultApi.NodesHotThreadsWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesHotThreadsWithNodeIdDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultApi.NodesHotThreadsWithNodeIdDeprecated(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesHotThreadsWithNodeIdDeprecatedCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultApi.NodesHotThreadsWithNodeIdDeprecatedCluster(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesHotThreadsWithNodeIdDeprecatedDash", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultApi.NodesHotThreadsWithNodeIdDeprecatedDash(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.NodesInfo(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesInfoWithMetricNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string
		var metric string

		httpRes, err := apiClient.DefaultApi.NodesInfoWithMetricNodeId(context.Background(), nodeId, metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesInfoWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultApi.NodesInfoWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesReloadSecureSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.NodesReloadSecureSettings(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesReloadSecureSettingsWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultApi.NodesReloadSecureSettingsWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.NodesStats(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesStatsWithIndexMetricMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string
		var indexMetric string

		httpRes, err := apiClient.DefaultApi.NodesStatsWithIndexMetricMetric(context.Background(), metric, indexMetric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesStatsWithIndexMetricMetricNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string
		var indexMetric string
		var nodeId string

		httpRes, err := apiClient.DefaultApi.NodesStatsWithIndexMetricMetricNodeId(context.Background(), metric, indexMetric, nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesStatsWithMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string

		httpRes, err := apiClient.DefaultApi.NodesStatsWithMetric(context.Background(), metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesStatsWithMetricNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string
		var nodeId string

		httpRes, err := apiClient.DefaultApi.NodesStatsWithMetricNodeId(context.Background(), metric, nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesStatsWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultApi.NodesStatsWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.NodesUsage(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesUsageWithMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string

		httpRes, err := apiClient.DefaultApi.NodesUsageWithMetric(context.Background(), metric).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesUsageWithMetricNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var metric string
		var nodeId string

		httpRes, err := apiClient.DefaultApi.NodesUsageWithMetricNodeId(context.Background(), metric, nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService NodesUsageWithNodeId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var nodeId string

		httpRes, err := apiClient.DefaultApi.NodesUsageWithNodeId(context.Background(), nodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchActionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var actionGroup string

		resp, httpRes, err := apiClient.DefaultApi.PatchActionGroup(context.Background(), actionGroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchActionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.PatchActionGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchAuditConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.PatchAuditConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.PatchConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchDistinguishedNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.PatchDistinguishedNames(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultApi.PatchRole(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchRoleMapping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var role string

		resp, httpRes, err := apiClient.DefaultApi.PatchRoleMapping(context.Background(), role).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchRoleMappings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.PatchRoleMappings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.PatchRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenant string

		resp, httpRes, err := apiClient.DefaultApi.PatchTenant(context.Background(), tenant).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchTenants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.PatchTenants(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.DefaultApi.PatchUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PatchUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.PatchUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService Ping", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.Ping(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PutScriptPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.PutScriptPost(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PutScriptPostWithContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var context string

		httpRes, err := apiClient.DefaultApi.PutScriptPostWithContext(context.Background(), id, context).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PutScriptPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.PutScriptPut(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService PutScriptPutWithContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var context string

		httpRes, err := apiClient.DefaultApi.PutScriptPutWithContext(context.Background(), id, context).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService RankEvalGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.RankEvalGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService RankEvalGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.RankEvalGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService RankEvalPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.RankEvalPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService RankEvalPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.RankEvalPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService Reindex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.Reindex(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ReindexRethrottle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultApi.ReindexRethrottle(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ReloadHttpCertificates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ReloadHttpCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ReloadTransportCertificates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.ReloadTransportCertificates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService RemoteStoreRestore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.RemoteStoreRestore(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService RenderSearchTemplateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.RenderSearchTemplateGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService RenderSearchTemplateGetWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.RenderSearchTemplateGetWithId(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService RenderSearchTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.RenderSearchTemplatePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService RenderSearchTemplatePostWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.DefaultApi.RenderSearchTemplatePostWithId(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ScriptsPainlessExecuteGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ScriptsPainlessExecuteGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ScriptsPainlessExecutePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ScriptsPainlessExecutePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ScrollGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ScrollGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ScrollGetWithScrollId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scrollId string

		httpRes, err := apiClient.DefaultApi.ScrollGetWithScrollId(context.Background(), scrollId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ScrollPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.ScrollPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService ScrollPostWithScrollId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scrollId string

		httpRes, err := apiClient.DefaultApi.ScrollPostWithScrollId(context.Background(), scrollId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.SearchGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultApi.SearchGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.SearchPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		resp, httpRes, err := apiClient.DefaultApi.SearchPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchShardsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.SearchShardsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchShardsGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.SearchShardsGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchShardsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.SearchShardsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchShardsPostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.SearchShardsPostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchTemplateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.SearchTemplateGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchTemplateGetWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.SearchTemplateGetWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchTemplatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.SearchTemplatePost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SearchTemplatePostWithIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.SearchTemplatePostWithIndex(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SecurityHealth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.SecurityHealth(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotCleanupRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultApi.SnapshotCleanupRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotClone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string
		var targetSnapshot string

		httpRes, err := apiClient.DefaultApi.SnapshotClone(context.Background(), repository, snapshot, targetSnapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotCreatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultApi.SnapshotCreatePost(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotCreatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultApi.SnapshotCreatePut(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotCreateRepositoryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultApi.SnapshotCreateRepositoryPost(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotCreateRepositoryPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultApi.SnapshotCreateRepositoryPut(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultApi.SnapshotDelete(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotDeleteRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultApi.SnapshotDeleteRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultApi.SnapshotGet(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotGetRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.SnapshotGetRepository(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotGetRepositoryWithRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultApi.SnapshotGetRepositoryWithRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotRestore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultApi.SnapshotRestore(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.SnapshotStatus(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotStatusWithRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultApi.SnapshotStatusWithRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotStatusWithRepositorySnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string
		var snapshot string

		httpRes, err := apiClient.DefaultApi.SnapshotStatusWithRepositorySnapshot(context.Background(), repository, snapshot).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService SnapshotVerifyRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repository string

		httpRes, err := apiClient.DefaultApi.SnapshotVerifyRepository(context.Background(), repository).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService TasksCancel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.TasksCancel(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService TasksCancelWithTaskId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultApi.TasksCancelWithTaskId(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService TasksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultApi.TasksGet(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService TasksList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.DefaultApi.TasksList(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService TermvectorsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.TermvectorsGet(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService TermvectorsGetWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var id string

		httpRes, err := apiClient.DefaultApi.TermvectorsGetWithId(context.Background(), index, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService TermvectorsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.TermvectorsPost(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService TermvectorsPostWithId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string
		var id string

		httpRes, err := apiClient.DefaultApi.TermvectorsPostWithId(context.Background(), index, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService Update", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index string

		httpRes, err := apiClient.DefaultApi.Update(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateAuditConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.UpdateAuditConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateByQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var index string

		httpRes, err := apiClient.DefaultApi.UpdateByQuery(context.Background(), index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateByQueryRethrottle", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.DefaultApi.UpdateByQueryRethrottle(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.UpdateConfiguration(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateDistinguishedNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterName string

		resp, httpRes, err := apiClient.DefaultApi.UpdateDistinguishedNames(context.Background(), clusterName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
