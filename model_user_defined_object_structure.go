/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserDefinedObjectStructure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserDefinedObjectStructure{}

// UserDefinedObjectStructure struct for UserDefinedObjectStructure
type UserDefinedObjectStructure struct {
	Bool interface{} `json:"bool,omitempty"`
	Boosting interface{} `json:"boosting,omitempty"`
	CombinedFields interface{} `json:"combined_fields,omitempty"`
	ConstantScore interface{} `json:"constant_score,omitempty"`
	DisMax interface{} `json:"dis_max,omitempty"`
	DistanceFeature interface{} `json:"distance_feature,omitempty"`
	Exists interface{} `json:"exists,omitempty"`
	FunctionScore interface{} `json:"function_score,omitempty"`
	Fuzzy map[string]interface{} `json:"fuzzy,omitempty"`
	GeoBoundingBox interface{} `json:"geo_bounding_box,omitempty"`
	GeoDistance interface{} `json:"geo_distance,omitempty"`
	GeoPolygon interface{} `json:"geo_polygon,omitempty"`
	GeoShape interface{} `json:"geo_shape,omitempty"`
	HasChild interface{} `json:"has_child,omitempty"`
	HasParent interface{} `json:"has_parent,omitempty"`
	Ids interface{} `json:"ids,omitempty"`
	Intervals map[string]interface{} `json:"intervals,omitempty"`
	Knn interface{} `json:"knn,omitempty"`
	Match map[string]interface{} `json:"match,omitempty"`
	MatchAll interface{} `json:"match_all,omitempty"`
	MatchBoolPrefix map[string]interface{} `json:"match_bool_prefix,omitempty"`
	MatchNone interface{} `json:"match_none,omitempty"`
	MatchPhrase map[string]interface{} `json:"match_phrase,omitempty"`
	MatchPhrasePrefix map[string]interface{} `json:"match_phrase_prefix,omitempty"`
	MoreLikeThis interface{} `json:"more_like_this,omitempty"`
	MultiMatch interface{} `json:"multi_match,omitempty"`
	Nested interface{} `json:"nested,omitempty"`
	ParentId interface{} `json:"parent_id,omitempty"`
	Percolate interface{} `json:"percolate,omitempty"`
	Pinned interface{} `json:"pinned,omitempty"`
	Prefix map[string]interface{} `json:"prefix,omitempty"`
	QueryString interface{} `json:"query_string,omitempty"`
	Range map[string]interface{} `json:"range,omitempty"`
	RankFeature interface{} `json:"rank_feature,omitempty"`
	Regexp map[string]interface{} `json:"regexp,omitempty"`
	Script interface{} `json:"script,omitempty"`
	ScriptScore interface{} `json:"script_score,omitempty"`
	Shape interface{} `json:"shape,omitempty"`
	SimpleQueryString interface{} `json:"simple_query_string,omitempty"`
	SpanContaining interface{} `json:"span_containing,omitempty"`
	FieldMaskingSpan interface{} `json:"field_masking_span,omitempty"`
	SpanFirst interface{} `json:"span_first,omitempty"`
	SpanMulti interface{} `json:"span_multi,omitempty"`
	SpanNear interface{} `json:"span_near,omitempty"`
	SpanNot interface{} `json:"span_not,omitempty"`
	SpanOr interface{} `json:"span_or,omitempty"`
	SpanTerm map[string]interface{} `json:"span_term,omitempty"`
	SpanWithin interface{} `json:"span_within,omitempty"`
	Term map[string]interface{} `json:"term,omitempty"`
	Terms interface{} `json:"terms,omitempty"`
	TermsSet map[string]interface{} `json:"terms_set,omitempty"`
	Wildcard map[string]interface{} `json:"wildcard,omitempty"`
	Wrapper interface{} `json:"wrapper,omitempty"`
}

// NewUserDefinedObjectStructure instantiates a new UserDefinedObjectStructure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDefinedObjectStructure() *UserDefinedObjectStructure {
	this := UserDefinedObjectStructure{}
	return &this
}

// NewUserDefinedObjectStructureWithDefaults instantiates a new UserDefinedObjectStructure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDefinedObjectStructureWithDefaults() *UserDefinedObjectStructure {
	this := UserDefinedObjectStructure{}
	return &this
}

// GetBool returns the Bool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetBool() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Bool
}

// GetBoolOk returns a tuple with the Bool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetBoolOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Bool) {
		return nil, false
	}
	return &o.Bool, true
}

// HasBool returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasBool() bool {
	if o != nil && IsNil(o.Bool) {
		return true
	}

	return false
}

// SetBool gets a reference to the given interface{} and assigns it to the Bool field.
func (o *UserDefinedObjectStructure) SetBool(v interface{}) {
	o.Bool = v
}

// GetBoosting returns the Boosting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetBoosting() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Boosting
}

// GetBoostingOk returns a tuple with the Boosting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetBoostingOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Boosting) {
		return nil, false
	}
	return &o.Boosting, true
}

// HasBoosting returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasBoosting() bool {
	if o != nil && IsNil(o.Boosting) {
		return true
	}

	return false
}

// SetBoosting gets a reference to the given interface{} and assigns it to the Boosting field.
func (o *UserDefinedObjectStructure) SetBoosting(v interface{}) {
	o.Boosting = v
}

// GetCombinedFields returns the CombinedFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetCombinedFields() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CombinedFields
}

// GetCombinedFieldsOk returns a tuple with the CombinedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetCombinedFieldsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CombinedFields) {
		return nil, false
	}
	return &o.CombinedFields, true
}

// HasCombinedFields returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasCombinedFields() bool {
	if o != nil && IsNil(o.CombinedFields) {
		return true
	}

	return false
}

// SetCombinedFields gets a reference to the given interface{} and assigns it to the CombinedFields field.
func (o *UserDefinedObjectStructure) SetCombinedFields(v interface{}) {
	o.CombinedFields = v
}

// GetConstantScore returns the ConstantScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetConstantScore() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ConstantScore
}

// GetConstantScoreOk returns a tuple with the ConstantScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetConstantScoreOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ConstantScore) {
		return nil, false
	}
	return &o.ConstantScore, true
}

// HasConstantScore returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasConstantScore() bool {
	if o != nil && IsNil(o.ConstantScore) {
		return true
	}

	return false
}

// SetConstantScore gets a reference to the given interface{} and assigns it to the ConstantScore field.
func (o *UserDefinedObjectStructure) SetConstantScore(v interface{}) {
	o.ConstantScore = v
}

// GetDisMax returns the DisMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetDisMax() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DisMax
}

// GetDisMaxOk returns a tuple with the DisMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetDisMaxOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DisMax) {
		return nil, false
	}
	return &o.DisMax, true
}

// HasDisMax returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasDisMax() bool {
	if o != nil && IsNil(o.DisMax) {
		return true
	}

	return false
}

// SetDisMax gets a reference to the given interface{} and assigns it to the DisMax field.
func (o *UserDefinedObjectStructure) SetDisMax(v interface{}) {
	o.DisMax = v
}

// GetDistanceFeature returns the DistanceFeature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetDistanceFeature() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DistanceFeature
}

// GetDistanceFeatureOk returns a tuple with the DistanceFeature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetDistanceFeatureOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DistanceFeature) {
		return nil, false
	}
	return &o.DistanceFeature, true
}

// HasDistanceFeature returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasDistanceFeature() bool {
	if o != nil && IsNil(o.DistanceFeature) {
		return true
	}

	return false
}

// SetDistanceFeature gets a reference to the given interface{} and assigns it to the DistanceFeature field.
func (o *UserDefinedObjectStructure) SetDistanceFeature(v interface{}) {
	o.DistanceFeature = v
}

// GetExists returns the Exists field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetExists() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetExistsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Exists) {
		return nil, false
	}
	return &o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasExists() bool {
	if o != nil && IsNil(o.Exists) {
		return true
	}

	return false
}

// SetExists gets a reference to the given interface{} and assigns it to the Exists field.
func (o *UserDefinedObjectStructure) SetExists(v interface{}) {
	o.Exists = v
}

// GetFunctionScore returns the FunctionScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetFunctionScore() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FunctionScore
}

// GetFunctionScoreOk returns a tuple with the FunctionScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetFunctionScoreOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FunctionScore) {
		return nil, false
	}
	return &o.FunctionScore, true
}

// HasFunctionScore returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasFunctionScore() bool {
	if o != nil && IsNil(o.FunctionScore) {
		return true
	}

	return false
}

// SetFunctionScore gets a reference to the given interface{} and assigns it to the FunctionScore field.
func (o *UserDefinedObjectStructure) SetFunctionScore(v interface{}) {
	o.FunctionScore = v
}

// GetFuzzy returns the Fuzzy field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetFuzzy() map[string]interface{} {
	if o == nil || IsNil(o.Fuzzy) {
		var ret map[string]interface{}
		return ret
	}
	return o.Fuzzy
}

// GetFuzzyOk returns a tuple with the Fuzzy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetFuzzyOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Fuzzy) {
		return map[string]interface{}{}, false
	}
	return o.Fuzzy, true
}

// HasFuzzy returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasFuzzy() bool {
	if o != nil && !IsNil(o.Fuzzy) {
		return true
	}

	return false
}

// SetFuzzy gets a reference to the given map[string]interface{} and assigns it to the Fuzzy field.
func (o *UserDefinedObjectStructure) SetFuzzy(v map[string]interface{}) {
	o.Fuzzy = v
}

// GetGeoBoundingBox returns the GeoBoundingBox field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetGeoBoundingBox() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GeoBoundingBox
}

// GetGeoBoundingBoxOk returns a tuple with the GeoBoundingBox field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetGeoBoundingBoxOk() (*interface{}, bool) {
	if o == nil || IsNil(o.GeoBoundingBox) {
		return nil, false
	}
	return &o.GeoBoundingBox, true
}

// HasGeoBoundingBox returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasGeoBoundingBox() bool {
	if o != nil && IsNil(o.GeoBoundingBox) {
		return true
	}

	return false
}

// SetGeoBoundingBox gets a reference to the given interface{} and assigns it to the GeoBoundingBox field.
func (o *UserDefinedObjectStructure) SetGeoBoundingBox(v interface{}) {
	o.GeoBoundingBox = v
}

// GetGeoDistance returns the GeoDistance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetGeoDistance() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GeoDistance
}

// GetGeoDistanceOk returns a tuple with the GeoDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetGeoDistanceOk() (*interface{}, bool) {
	if o == nil || IsNil(o.GeoDistance) {
		return nil, false
	}
	return &o.GeoDistance, true
}

// HasGeoDistance returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasGeoDistance() bool {
	if o != nil && IsNil(o.GeoDistance) {
		return true
	}

	return false
}

// SetGeoDistance gets a reference to the given interface{} and assigns it to the GeoDistance field.
func (o *UserDefinedObjectStructure) SetGeoDistance(v interface{}) {
	o.GeoDistance = v
}

// GetGeoPolygon returns the GeoPolygon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetGeoPolygon() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GeoPolygon
}

// GetGeoPolygonOk returns a tuple with the GeoPolygon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetGeoPolygonOk() (*interface{}, bool) {
	if o == nil || IsNil(o.GeoPolygon) {
		return nil, false
	}
	return &o.GeoPolygon, true
}

// HasGeoPolygon returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasGeoPolygon() bool {
	if o != nil && IsNil(o.GeoPolygon) {
		return true
	}

	return false
}

// SetGeoPolygon gets a reference to the given interface{} and assigns it to the GeoPolygon field.
func (o *UserDefinedObjectStructure) SetGeoPolygon(v interface{}) {
	o.GeoPolygon = v
}

// GetGeoShape returns the GeoShape field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetGeoShape() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.GeoShape
}

// GetGeoShapeOk returns a tuple with the GeoShape field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetGeoShapeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.GeoShape) {
		return nil, false
	}
	return &o.GeoShape, true
}

// HasGeoShape returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasGeoShape() bool {
	if o != nil && IsNil(o.GeoShape) {
		return true
	}

	return false
}

// SetGeoShape gets a reference to the given interface{} and assigns it to the GeoShape field.
func (o *UserDefinedObjectStructure) SetGeoShape(v interface{}) {
	o.GeoShape = v
}

// GetHasChild returns the HasChild field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetHasChild() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.HasChild
}

// GetHasChildOk returns a tuple with the HasChild field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetHasChildOk() (*interface{}, bool) {
	if o == nil || IsNil(o.HasChild) {
		return nil, false
	}
	return &o.HasChild, true
}

// HasHasChild returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasHasChild() bool {
	if o != nil && IsNil(o.HasChild) {
		return true
	}

	return false
}

// SetHasChild gets a reference to the given interface{} and assigns it to the HasChild field.
func (o *UserDefinedObjectStructure) SetHasChild(v interface{}) {
	o.HasChild = v
}

// GetHasParent returns the HasParent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetHasParent() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.HasParent
}

// GetHasParentOk returns a tuple with the HasParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetHasParentOk() (*interface{}, bool) {
	if o == nil || IsNil(o.HasParent) {
		return nil, false
	}
	return &o.HasParent, true
}

// HasHasParent returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasHasParent() bool {
	if o != nil && IsNil(o.HasParent) {
		return true
	}

	return false
}

// SetHasParent gets a reference to the given interface{} and assigns it to the HasParent field.
func (o *UserDefinedObjectStructure) SetHasParent(v interface{}) {
	o.HasParent = v
}

// GetIds returns the Ids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetIds() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetIdsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return &o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasIds() bool {
	if o != nil && IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given interface{} and assigns it to the Ids field.
func (o *UserDefinedObjectStructure) SetIds(v interface{}) {
	o.Ids = v
}

// GetIntervals returns the Intervals field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetIntervals() map[string]interface{} {
	if o == nil || IsNil(o.Intervals) {
		var ret map[string]interface{}
		return ret
	}
	return o.Intervals
}

// GetIntervalsOk returns a tuple with the Intervals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetIntervalsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Intervals) {
		return map[string]interface{}{}, false
	}
	return o.Intervals, true
}

// HasIntervals returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasIntervals() bool {
	if o != nil && !IsNil(o.Intervals) {
		return true
	}

	return false
}

// SetIntervals gets a reference to the given map[string]interface{} and assigns it to the Intervals field.
func (o *UserDefinedObjectStructure) SetIntervals(v map[string]interface{}) {
	o.Intervals = v
}

// GetKnn returns the Knn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetKnn() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Knn
}

// GetKnnOk returns a tuple with the Knn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetKnnOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Knn) {
		return nil, false
	}
	return &o.Knn, true
}

// HasKnn returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasKnn() bool {
	if o != nil && IsNil(o.Knn) {
		return true
	}

	return false
}

// SetKnn gets a reference to the given interface{} and assigns it to the Knn field.
func (o *UserDefinedObjectStructure) SetKnn(v interface{}) {
	o.Knn = v
}

// GetMatch returns the Match field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetMatch() map[string]interface{} {
	if o == nil || IsNil(o.Match) {
		var ret map[string]interface{}
		return ret
	}
	return o.Match
}

// GetMatchOk returns a tuple with the Match field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetMatchOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Match) {
		return map[string]interface{}{}, false
	}
	return o.Match, true
}

// HasMatch returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasMatch() bool {
	if o != nil && !IsNil(o.Match) {
		return true
	}

	return false
}

// SetMatch gets a reference to the given map[string]interface{} and assigns it to the Match field.
func (o *UserDefinedObjectStructure) SetMatch(v map[string]interface{}) {
	o.Match = v
}

// GetMatchAll returns the MatchAll field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetMatchAll() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.MatchAll
}

// GetMatchAllOk returns a tuple with the MatchAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetMatchAllOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MatchAll) {
		return nil, false
	}
	return &o.MatchAll, true
}

// HasMatchAll returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasMatchAll() bool {
	if o != nil && IsNil(o.MatchAll) {
		return true
	}

	return false
}

// SetMatchAll gets a reference to the given interface{} and assigns it to the MatchAll field.
func (o *UserDefinedObjectStructure) SetMatchAll(v interface{}) {
	o.MatchAll = v
}

// GetMatchBoolPrefix returns the MatchBoolPrefix field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetMatchBoolPrefix() map[string]interface{} {
	if o == nil || IsNil(o.MatchBoolPrefix) {
		var ret map[string]interface{}
		return ret
	}
	return o.MatchBoolPrefix
}

// GetMatchBoolPrefixOk returns a tuple with the MatchBoolPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetMatchBoolPrefixOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MatchBoolPrefix) {
		return map[string]interface{}{}, false
	}
	return o.MatchBoolPrefix, true
}

// HasMatchBoolPrefix returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasMatchBoolPrefix() bool {
	if o != nil && !IsNil(o.MatchBoolPrefix) {
		return true
	}

	return false
}

// SetMatchBoolPrefix gets a reference to the given map[string]interface{} and assigns it to the MatchBoolPrefix field.
func (o *UserDefinedObjectStructure) SetMatchBoolPrefix(v map[string]interface{}) {
	o.MatchBoolPrefix = v
}

// GetMatchNone returns the MatchNone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetMatchNone() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.MatchNone
}

// GetMatchNoneOk returns a tuple with the MatchNone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetMatchNoneOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MatchNone) {
		return nil, false
	}
	return &o.MatchNone, true
}

// HasMatchNone returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasMatchNone() bool {
	if o != nil && IsNil(o.MatchNone) {
		return true
	}

	return false
}

// SetMatchNone gets a reference to the given interface{} and assigns it to the MatchNone field.
func (o *UserDefinedObjectStructure) SetMatchNone(v interface{}) {
	o.MatchNone = v
}

// GetMatchPhrase returns the MatchPhrase field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetMatchPhrase() map[string]interface{} {
	if o == nil || IsNil(o.MatchPhrase) {
		var ret map[string]interface{}
		return ret
	}
	return o.MatchPhrase
}

// GetMatchPhraseOk returns a tuple with the MatchPhrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetMatchPhraseOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MatchPhrase) {
		return map[string]interface{}{}, false
	}
	return o.MatchPhrase, true
}

// HasMatchPhrase returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasMatchPhrase() bool {
	if o != nil && !IsNil(o.MatchPhrase) {
		return true
	}

	return false
}

// SetMatchPhrase gets a reference to the given map[string]interface{} and assigns it to the MatchPhrase field.
func (o *UserDefinedObjectStructure) SetMatchPhrase(v map[string]interface{}) {
	o.MatchPhrase = v
}

// GetMatchPhrasePrefix returns the MatchPhrasePrefix field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetMatchPhrasePrefix() map[string]interface{} {
	if o == nil || IsNil(o.MatchPhrasePrefix) {
		var ret map[string]interface{}
		return ret
	}
	return o.MatchPhrasePrefix
}

// GetMatchPhrasePrefixOk returns a tuple with the MatchPhrasePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetMatchPhrasePrefixOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MatchPhrasePrefix) {
		return map[string]interface{}{}, false
	}
	return o.MatchPhrasePrefix, true
}

// HasMatchPhrasePrefix returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasMatchPhrasePrefix() bool {
	if o != nil && !IsNil(o.MatchPhrasePrefix) {
		return true
	}

	return false
}

// SetMatchPhrasePrefix gets a reference to the given map[string]interface{} and assigns it to the MatchPhrasePrefix field.
func (o *UserDefinedObjectStructure) SetMatchPhrasePrefix(v map[string]interface{}) {
	o.MatchPhrasePrefix = v
}

// GetMoreLikeThis returns the MoreLikeThis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetMoreLikeThis() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.MoreLikeThis
}

// GetMoreLikeThisOk returns a tuple with the MoreLikeThis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetMoreLikeThisOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MoreLikeThis) {
		return nil, false
	}
	return &o.MoreLikeThis, true
}

// HasMoreLikeThis returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasMoreLikeThis() bool {
	if o != nil && IsNil(o.MoreLikeThis) {
		return true
	}

	return false
}

// SetMoreLikeThis gets a reference to the given interface{} and assigns it to the MoreLikeThis field.
func (o *UserDefinedObjectStructure) SetMoreLikeThis(v interface{}) {
	o.MoreLikeThis = v
}

// GetMultiMatch returns the MultiMatch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetMultiMatch() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.MultiMatch
}

// GetMultiMatchOk returns a tuple with the MultiMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetMultiMatchOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MultiMatch) {
		return nil, false
	}
	return &o.MultiMatch, true
}

// HasMultiMatch returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasMultiMatch() bool {
	if o != nil && IsNil(o.MultiMatch) {
		return true
	}

	return false
}

// SetMultiMatch gets a reference to the given interface{} and assigns it to the MultiMatch field.
func (o *UserDefinedObjectStructure) SetMultiMatch(v interface{}) {
	o.MultiMatch = v
}

// GetNested returns the Nested field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetNested() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Nested
}

// GetNestedOk returns a tuple with the Nested field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetNestedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Nested) {
		return nil, false
	}
	return &o.Nested, true
}

// HasNested returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasNested() bool {
	if o != nil && IsNil(o.Nested) {
		return true
	}

	return false
}

// SetNested gets a reference to the given interface{} and assigns it to the Nested field.
func (o *UserDefinedObjectStructure) SetNested(v interface{}) {
	o.Nested = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetParentId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetParentIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return &o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasParentId() bool {
	if o != nil && IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given interface{} and assigns it to the ParentId field.
func (o *UserDefinedObjectStructure) SetParentId(v interface{}) {
	o.ParentId = v
}

// GetPercolate returns the Percolate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetPercolate() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Percolate
}

// GetPercolateOk returns a tuple with the Percolate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetPercolateOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Percolate) {
		return nil, false
	}
	return &o.Percolate, true
}

// HasPercolate returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasPercolate() bool {
	if o != nil && IsNil(o.Percolate) {
		return true
	}

	return false
}

// SetPercolate gets a reference to the given interface{} and assigns it to the Percolate field.
func (o *UserDefinedObjectStructure) SetPercolate(v interface{}) {
	o.Percolate = v
}

// GetPinned returns the Pinned field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetPinned() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetPinnedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Pinned) {
		return nil, false
	}
	return &o.Pinned, true
}

// HasPinned returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasPinned() bool {
	if o != nil && IsNil(o.Pinned) {
		return true
	}

	return false
}

// SetPinned gets a reference to the given interface{} and assigns it to the Pinned field.
func (o *UserDefinedObjectStructure) SetPinned(v interface{}) {
	o.Pinned = v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetPrefix() map[string]interface{} {
	if o == nil || IsNil(o.Prefix) {
		var ret map[string]interface{}
		return ret
	}
	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetPrefixOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Prefix) {
		return map[string]interface{}{}, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given map[string]interface{} and assigns it to the Prefix field.
func (o *UserDefinedObjectStructure) SetPrefix(v map[string]interface{}) {
	o.Prefix = v
}

// GetQueryString returns the QueryString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetQueryString() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.QueryString
}

// GetQueryStringOk returns a tuple with the QueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetQueryStringOk() (*interface{}, bool) {
	if o == nil || IsNil(o.QueryString) {
		return nil, false
	}
	return &o.QueryString, true
}

// HasQueryString returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasQueryString() bool {
	if o != nil && IsNil(o.QueryString) {
		return true
	}

	return false
}

// SetQueryString gets a reference to the given interface{} and assigns it to the QueryString field.
func (o *UserDefinedObjectStructure) SetQueryString(v interface{}) {
	o.QueryString = v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetRange() map[string]interface{} {
	if o == nil || IsNil(o.Range) {
		var ret map[string]interface{}
		return ret
	}
	return o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetRangeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Range) {
		return map[string]interface{}{}, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasRange() bool {
	if o != nil && !IsNil(o.Range) {
		return true
	}

	return false
}

// SetRange gets a reference to the given map[string]interface{} and assigns it to the Range field.
func (o *UserDefinedObjectStructure) SetRange(v map[string]interface{}) {
	o.Range = v
}

// GetRankFeature returns the RankFeature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetRankFeature() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RankFeature
}

// GetRankFeatureOk returns a tuple with the RankFeature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetRankFeatureOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RankFeature) {
		return nil, false
	}
	return &o.RankFeature, true
}

// HasRankFeature returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasRankFeature() bool {
	if o != nil && IsNil(o.RankFeature) {
		return true
	}

	return false
}

// SetRankFeature gets a reference to the given interface{} and assigns it to the RankFeature field.
func (o *UserDefinedObjectStructure) SetRankFeature(v interface{}) {
	o.RankFeature = v
}

// GetRegexp returns the Regexp field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetRegexp() map[string]interface{} {
	if o == nil || IsNil(o.Regexp) {
		var ret map[string]interface{}
		return ret
	}
	return o.Regexp
}

// GetRegexpOk returns a tuple with the Regexp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetRegexpOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Regexp) {
		return map[string]interface{}{}, false
	}
	return o.Regexp, true
}

// HasRegexp returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasRegexp() bool {
	if o != nil && !IsNil(o.Regexp) {
		return true
	}

	return false
}

// SetRegexp gets a reference to the given map[string]interface{} and assigns it to the Regexp field.
func (o *UserDefinedObjectStructure) SetRegexp(v map[string]interface{}) {
	o.Regexp = v
}

// GetScript returns the Script field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetScript() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetScriptOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Script) {
		return nil, false
	}
	return &o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasScript() bool {
	if o != nil && IsNil(o.Script) {
		return true
	}

	return false
}

// SetScript gets a reference to the given interface{} and assigns it to the Script field.
func (o *UserDefinedObjectStructure) SetScript(v interface{}) {
	o.Script = v
}

// GetScriptScore returns the ScriptScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetScriptScore() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ScriptScore
}

// GetScriptScoreOk returns a tuple with the ScriptScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetScriptScoreOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ScriptScore) {
		return nil, false
	}
	return &o.ScriptScore, true
}

// HasScriptScore returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasScriptScore() bool {
	if o != nil && IsNil(o.ScriptScore) {
		return true
	}

	return false
}

// SetScriptScore gets a reference to the given interface{} and assigns it to the ScriptScore field.
func (o *UserDefinedObjectStructure) SetScriptScore(v interface{}) {
	o.ScriptScore = v
}

// GetShape returns the Shape field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetShape() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Shape
}

// GetShapeOk returns a tuple with the Shape field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetShapeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Shape) {
		return nil, false
	}
	return &o.Shape, true
}

// HasShape returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasShape() bool {
	if o != nil && IsNil(o.Shape) {
		return true
	}

	return false
}

// SetShape gets a reference to the given interface{} and assigns it to the Shape field.
func (o *UserDefinedObjectStructure) SetShape(v interface{}) {
	o.Shape = v
}

// GetSimpleQueryString returns the SimpleQueryString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetSimpleQueryString() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SimpleQueryString
}

// GetSimpleQueryStringOk returns a tuple with the SimpleQueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetSimpleQueryStringOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SimpleQueryString) {
		return nil, false
	}
	return &o.SimpleQueryString, true
}

// HasSimpleQueryString returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasSimpleQueryString() bool {
	if o != nil && IsNil(o.SimpleQueryString) {
		return true
	}

	return false
}

// SetSimpleQueryString gets a reference to the given interface{} and assigns it to the SimpleQueryString field.
func (o *UserDefinedObjectStructure) SetSimpleQueryString(v interface{}) {
	o.SimpleQueryString = v
}

// GetSpanContaining returns the SpanContaining field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetSpanContaining() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SpanContaining
}

// GetSpanContainingOk returns a tuple with the SpanContaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetSpanContainingOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SpanContaining) {
		return nil, false
	}
	return &o.SpanContaining, true
}

// HasSpanContaining returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasSpanContaining() bool {
	if o != nil && IsNil(o.SpanContaining) {
		return true
	}

	return false
}

// SetSpanContaining gets a reference to the given interface{} and assigns it to the SpanContaining field.
func (o *UserDefinedObjectStructure) SetSpanContaining(v interface{}) {
	o.SpanContaining = v
}

// GetFieldMaskingSpan returns the FieldMaskingSpan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetFieldMaskingSpan() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.FieldMaskingSpan
}

// GetFieldMaskingSpanOk returns a tuple with the FieldMaskingSpan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetFieldMaskingSpanOk() (*interface{}, bool) {
	if o == nil || IsNil(o.FieldMaskingSpan) {
		return nil, false
	}
	return &o.FieldMaskingSpan, true
}

// HasFieldMaskingSpan returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasFieldMaskingSpan() bool {
	if o != nil && IsNil(o.FieldMaskingSpan) {
		return true
	}

	return false
}

// SetFieldMaskingSpan gets a reference to the given interface{} and assigns it to the FieldMaskingSpan field.
func (o *UserDefinedObjectStructure) SetFieldMaskingSpan(v interface{}) {
	o.FieldMaskingSpan = v
}

// GetSpanFirst returns the SpanFirst field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetSpanFirst() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SpanFirst
}

// GetSpanFirstOk returns a tuple with the SpanFirst field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetSpanFirstOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SpanFirst) {
		return nil, false
	}
	return &o.SpanFirst, true
}

// HasSpanFirst returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasSpanFirst() bool {
	if o != nil && IsNil(o.SpanFirst) {
		return true
	}

	return false
}

// SetSpanFirst gets a reference to the given interface{} and assigns it to the SpanFirst field.
func (o *UserDefinedObjectStructure) SetSpanFirst(v interface{}) {
	o.SpanFirst = v
}

// GetSpanMulti returns the SpanMulti field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetSpanMulti() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SpanMulti
}

// GetSpanMultiOk returns a tuple with the SpanMulti field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetSpanMultiOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SpanMulti) {
		return nil, false
	}
	return &o.SpanMulti, true
}

// HasSpanMulti returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasSpanMulti() bool {
	if o != nil && IsNil(o.SpanMulti) {
		return true
	}

	return false
}

// SetSpanMulti gets a reference to the given interface{} and assigns it to the SpanMulti field.
func (o *UserDefinedObjectStructure) SetSpanMulti(v interface{}) {
	o.SpanMulti = v
}

// GetSpanNear returns the SpanNear field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetSpanNear() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SpanNear
}

// GetSpanNearOk returns a tuple with the SpanNear field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetSpanNearOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SpanNear) {
		return nil, false
	}
	return &o.SpanNear, true
}

// HasSpanNear returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasSpanNear() bool {
	if o != nil && IsNil(o.SpanNear) {
		return true
	}

	return false
}

// SetSpanNear gets a reference to the given interface{} and assigns it to the SpanNear field.
func (o *UserDefinedObjectStructure) SetSpanNear(v interface{}) {
	o.SpanNear = v
}

// GetSpanNot returns the SpanNot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetSpanNot() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SpanNot
}

// GetSpanNotOk returns a tuple with the SpanNot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetSpanNotOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SpanNot) {
		return nil, false
	}
	return &o.SpanNot, true
}

// HasSpanNot returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasSpanNot() bool {
	if o != nil && IsNil(o.SpanNot) {
		return true
	}

	return false
}

// SetSpanNot gets a reference to the given interface{} and assigns it to the SpanNot field.
func (o *UserDefinedObjectStructure) SetSpanNot(v interface{}) {
	o.SpanNot = v
}

// GetSpanOr returns the SpanOr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetSpanOr() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SpanOr
}

// GetSpanOrOk returns a tuple with the SpanOr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetSpanOrOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SpanOr) {
		return nil, false
	}
	return &o.SpanOr, true
}

// HasSpanOr returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasSpanOr() bool {
	if o != nil && IsNil(o.SpanOr) {
		return true
	}

	return false
}

// SetSpanOr gets a reference to the given interface{} and assigns it to the SpanOr field.
func (o *UserDefinedObjectStructure) SetSpanOr(v interface{}) {
	o.SpanOr = v
}

// GetSpanTerm returns the SpanTerm field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetSpanTerm() map[string]interface{} {
	if o == nil || IsNil(o.SpanTerm) {
		var ret map[string]interface{}
		return ret
	}
	return o.SpanTerm
}

// GetSpanTermOk returns a tuple with the SpanTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetSpanTermOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SpanTerm) {
		return map[string]interface{}{}, false
	}
	return o.SpanTerm, true
}

// HasSpanTerm returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasSpanTerm() bool {
	if o != nil && !IsNil(o.SpanTerm) {
		return true
	}

	return false
}

// SetSpanTerm gets a reference to the given map[string]interface{} and assigns it to the SpanTerm field.
func (o *UserDefinedObjectStructure) SetSpanTerm(v map[string]interface{}) {
	o.SpanTerm = v
}

// GetSpanWithin returns the SpanWithin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetSpanWithin() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SpanWithin
}

// GetSpanWithinOk returns a tuple with the SpanWithin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetSpanWithinOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SpanWithin) {
		return nil, false
	}
	return &o.SpanWithin, true
}

// HasSpanWithin returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasSpanWithin() bool {
	if o != nil && IsNil(o.SpanWithin) {
		return true
	}

	return false
}

// SetSpanWithin gets a reference to the given interface{} and assigns it to the SpanWithin field.
func (o *UserDefinedObjectStructure) SetSpanWithin(v interface{}) {
	o.SpanWithin = v
}

// GetTerm returns the Term field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetTerm() map[string]interface{} {
	if o == nil || IsNil(o.Term) {
		var ret map[string]interface{}
		return ret
	}
	return o.Term
}

// GetTermOk returns a tuple with the Term field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetTermOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Term) {
		return map[string]interface{}{}, false
	}
	return o.Term, true
}

// HasTerm returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasTerm() bool {
	if o != nil && !IsNil(o.Term) {
		return true
	}

	return false
}

// SetTerm gets a reference to the given map[string]interface{} and assigns it to the Term field.
func (o *UserDefinedObjectStructure) SetTerm(v map[string]interface{}) {
	o.Term = v
}

// GetTerms returns the Terms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetTerms() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetTermsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Terms) {
		return nil, false
	}
	return &o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasTerms() bool {
	if o != nil && IsNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given interface{} and assigns it to the Terms field.
func (o *UserDefinedObjectStructure) SetTerms(v interface{}) {
	o.Terms = v
}

// GetTermsSet returns the TermsSet field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetTermsSet() map[string]interface{} {
	if o == nil || IsNil(o.TermsSet) {
		var ret map[string]interface{}
		return ret
	}
	return o.TermsSet
}

// GetTermsSetOk returns a tuple with the TermsSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetTermsSetOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TermsSet) {
		return map[string]interface{}{}, false
	}
	return o.TermsSet, true
}

// HasTermsSet returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasTermsSet() bool {
	if o != nil && !IsNil(o.TermsSet) {
		return true
	}

	return false
}

// SetTermsSet gets a reference to the given map[string]interface{} and assigns it to the TermsSet field.
func (o *UserDefinedObjectStructure) SetTermsSet(v map[string]interface{}) {
	o.TermsSet = v
}

// GetWildcard returns the Wildcard field value if set, zero value otherwise.
func (o *UserDefinedObjectStructure) GetWildcard() map[string]interface{} {
	if o == nil || IsNil(o.Wildcard) {
		var ret map[string]interface{}
		return ret
	}
	return o.Wildcard
}

// GetWildcardOk returns a tuple with the Wildcard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDefinedObjectStructure) GetWildcardOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Wildcard) {
		return map[string]interface{}{}, false
	}
	return o.Wildcard, true
}

// HasWildcard returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasWildcard() bool {
	if o != nil && !IsNil(o.Wildcard) {
		return true
	}

	return false
}

// SetWildcard gets a reference to the given map[string]interface{} and assigns it to the Wildcard field.
func (o *UserDefinedObjectStructure) SetWildcard(v map[string]interface{}) {
	o.Wildcard = v
}

// GetWrapper returns the Wrapper field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserDefinedObjectStructure) GetWrapper() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Wrapper
}

// GetWrapperOk returns a tuple with the Wrapper field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserDefinedObjectStructure) GetWrapperOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Wrapper) {
		return nil, false
	}
	return &o.Wrapper, true
}

// HasWrapper returns a boolean if a field has been set.
func (o *UserDefinedObjectStructure) HasWrapper() bool {
	if o != nil && IsNil(o.Wrapper) {
		return true
	}

	return false
}

// SetWrapper gets a reference to the given interface{} and assigns it to the Wrapper field.
func (o *UserDefinedObjectStructure) SetWrapper(v interface{}) {
	o.Wrapper = v
}

func (o UserDefinedObjectStructure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserDefinedObjectStructure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Bool != nil {
		toSerialize["bool"] = o.Bool
	}
	if o.Boosting != nil {
		toSerialize["boosting"] = o.Boosting
	}
	if o.CombinedFields != nil {
		toSerialize["combined_fields"] = o.CombinedFields
	}
	if o.ConstantScore != nil {
		toSerialize["constant_score"] = o.ConstantScore
	}
	if o.DisMax != nil {
		toSerialize["dis_max"] = o.DisMax
	}
	if o.DistanceFeature != nil {
		toSerialize["distance_feature"] = o.DistanceFeature
	}
	if o.Exists != nil {
		toSerialize["exists"] = o.Exists
	}
	if o.FunctionScore != nil {
		toSerialize["function_score"] = o.FunctionScore
	}
	if !IsNil(o.Fuzzy) {
		toSerialize["fuzzy"] = o.Fuzzy
	}
	if o.GeoBoundingBox != nil {
		toSerialize["geo_bounding_box"] = o.GeoBoundingBox
	}
	if o.GeoDistance != nil {
		toSerialize["geo_distance"] = o.GeoDistance
	}
	if o.GeoPolygon != nil {
		toSerialize["geo_polygon"] = o.GeoPolygon
	}
	if o.GeoShape != nil {
		toSerialize["geo_shape"] = o.GeoShape
	}
	if o.HasChild != nil {
		toSerialize["has_child"] = o.HasChild
	}
	if o.HasParent != nil {
		toSerialize["has_parent"] = o.HasParent
	}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.Intervals) {
		toSerialize["intervals"] = o.Intervals
	}
	if o.Knn != nil {
		toSerialize["knn"] = o.Knn
	}
	if !IsNil(o.Match) {
		toSerialize["match"] = o.Match
	}
	if o.MatchAll != nil {
		toSerialize["match_all"] = o.MatchAll
	}
	if !IsNil(o.MatchBoolPrefix) {
		toSerialize["match_bool_prefix"] = o.MatchBoolPrefix
	}
	if o.MatchNone != nil {
		toSerialize["match_none"] = o.MatchNone
	}
	if !IsNil(o.MatchPhrase) {
		toSerialize["match_phrase"] = o.MatchPhrase
	}
	if !IsNil(o.MatchPhrasePrefix) {
		toSerialize["match_phrase_prefix"] = o.MatchPhrasePrefix
	}
	if o.MoreLikeThis != nil {
		toSerialize["more_like_this"] = o.MoreLikeThis
	}
	if o.MultiMatch != nil {
		toSerialize["multi_match"] = o.MultiMatch
	}
	if o.Nested != nil {
		toSerialize["nested"] = o.Nested
	}
	if o.ParentId != nil {
		toSerialize["parent_id"] = o.ParentId
	}
	if o.Percolate != nil {
		toSerialize["percolate"] = o.Percolate
	}
	if o.Pinned != nil {
		toSerialize["pinned"] = o.Pinned
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if o.QueryString != nil {
		toSerialize["query_string"] = o.QueryString
	}
	if !IsNil(o.Range) {
		toSerialize["range"] = o.Range
	}
	if o.RankFeature != nil {
		toSerialize["rank_feature"] = o.RankFeature
	}
	if !IsNil(o.Regexp) {
		toSerialize["regexp"] = o.Regexp
	}
	if o.Script != nil {
		toSerialize["script"] = o.Script
	}
	if o.ScriptScore != nil {
		toSerialize["script_score"] = o.ScriptScore
	}
	if o.Shape != nil {
		toSerialize["shape"] = o.Shape
	}
	if o.SimpleQueryString != nil {
		toSerialize["simple_query_string"] = o.SimpleQueryString
	}
	if o.SpanContaining != nil {
		toSerialize["span_containing"] = o.SpanContaining
	}
	if o.FieldMaskingSpan != nil {
		toSerialize["field_masking_span"] = o.FieldMaskingSpan
	}
	if o.SpanFirst != nil {
		toSerialize["span_first"] = o.SpanFirst
	}
	if o.SpanMulti != nil {
		toSerialize["span_multi"] = o.SpanMulti
	}
	if o.SpanNear != nil {
		toSerialize["span_near"] = o.SpanNear
	}
	if o.SpanNot != nil {
		toSerialize["span_not"] = o.SpanNot
	}
	if o.SpanOr != nil {
		toSerialize["span_or"] = o.SpanOr
	}
	if !IsNil(o.SpanTerm) {
		toSerialize["span_term"] = o.SpanTerm
	}
	if o.SpanWithin != nil {
		toSerialize["span_within"] = o.SpanWithin
	}
	if !IsNil(o.Term) {
		toSerialize["term"] = o.Term
	}
	if o.Terms != nil {
		toSerialize["terms"] = o.Terms
	}
	if !IsNil(o.TermsSet) {
		toSerialize["terms_set"] = o.TermsSet
	}
	if !IsNil(o.Wildcard) {
		toSerialize["wildcard"] = o.Wildcard
	}
	if o.Wrapper != nil {
		toSerialize["wrapper"] = o.Wrapper
	}
	return toSerialize, nil
}

type NullableUserDefinedObjectStructure struct {
	value *UserDefinedObjectStructure
	isSet bool
}

func (v NullableUserDefinedObjectStructure) Get() *UserDefinedObjectStructure {
	return v.value
}

func (v *NullableUserDefinedObjectStructure) Set(val *UserDefinedObjectStructure) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDefinedObjectStructure) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDefinedObjectStructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDefinedObjectStructure(val *UserDefinedObjectStructure) *NullableUserDefinedObjectStructure {
	return &NullableUserDefinedObjectStructure{value: val, isSet: true}
}

func (v NullableUserDefinedObjectStructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDefinedObjectStructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


