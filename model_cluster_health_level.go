/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ClusterHealthLevel Specify the level of detail for returned information.
type ClusterHealthLevel string

// List of ClusterHealthLevel
const (
	CLUSTER ClusterHealthLevel = "cluster"
	INDICES ClusterHealthLevel = "indices"
	SHARDS ClusterHealthLevel = "shards"
	AWARENESS_ATTRIBUTES ClusterHealthLevel = "awareness_attributes"
)

// All allowed values of ClusterHealthLevel enum
var AllowedClusterHealthLevelEnumValues = []ClusterHealthLevel{
	"cluster",
	"indices",
	"shards",
	"awareness_attributes",
}

func (v *ClusterHealthLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterHealthLevel(value)
	for _, existing := range AllowedClusterHealthLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterHealthLevel", value)
}

// NewClusterHealthLevelFromValue returns a pointer to a valid ClusterHealthLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterHealthLevelFromValue(v string) (*ClusterHealthLevel, error) {
	ev := ClusterHealthLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterHealthLevel: valid values are %v", v, AllowedClusterHealthLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterHealthLevel) IsValid() bool {
	for _, existing := range AllowedClusterHealthLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterHealthLevel value
func (v ClusterHealthLevel) Ptr() *ClusterHealthLevel {
	return &v
}

type NullableClusterHealthLevel struct {
	value *ClusterHealthLevel
	isSet bool
}

func (v NullableClusterHealthLevel) Get() *ClusterHealthLevel {
	return v.value
}

func (v *NullableClusterHealthLevel) Set(val *ClusterHealthLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterHealthLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterHealthLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterHealthLevel(val *ClusterHealthLevel) *NullableClusterHealthLevel {
	return &NullableClusterHealthLevel{value: val, isSet: true}
}

func (v NullableClusterHealthLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterHealthLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

