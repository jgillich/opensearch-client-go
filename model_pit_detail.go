/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PitDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PitDetail{}

// PitDetail struct for PitDetail
type PitDetail struct {
	PitId *string `json:"pit_id,omitempty"`
	CreationTime *int64 `json:"creation_time,omitempty"`
	KeepAlive *int64 `json:"keep_alive,omitempty"`
}

// NewPitDetail instantiates a new PitDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPitDetail() *PitDetail {
	this := PitDetail{}
	return &this
}

// NewPitDetailWithDefaults instantiates a new PitDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPitDetailWithDefaults() *PitDetail {
	this := PitDetail{}
	return &this
}

// GetPitId returns the PitId field value if set, zero value otherwise.
func (o *PitDetail) GetPitId() string {
	if o == nil || IsNil(o.PitId) {
		var ret string
		return ret
	}
	return *o.PitId
}

// GetPitIdOk returns a tuple with the PitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PitDetail) GetPitIdOk() (*string, bool) {
	if o == nil || IsNil(o.PitId) {
		return nil, false
	}
	return o.PitId, true
}

// HasPitId returns a boolean if a field has been set.
func (o *PitDetail) HasPitId() bool {
	if o != nil && !IsNil(o.PitId) {
		return true
	}

	return false
}

// SetPitId gets a reference to the given string and assigns it to the PitId field.
func (o *PitDetail) SetPitId(v string) {
	o.PitId = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *PitDetail) GetCreationTime() int64 {
	if o == nil || IsNil(o.CreationTime) {
		var ret int64
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PitDetail) GetCreationTimeOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *PitDetail) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given int64 and assigns it to the CreationTime field.
func (o *PitDetail) SetCreationTime(v int64) {
	o.CreationTime = &v
}

// GetKeepAlive returns the KeepAlive field value if set, zero value otherwise.
func (o *PitDetail) GetKeepAlive() int64 {
	if o == nil || IsNil(o.KeepAlive) {
		var ret int64
		return ret
	}
	return *o.KeepAlive
}

// GetKeepAliveOk returns a tuple with the KeepAlive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PitDetail) GetKeepAliveOk() (*int64, bool) {
	if o == nil || IsNil(o.KeepAlive) {
		return nil, false
	}
	return o.KeepAlive, true
}

// HasKeepAlive returns a boolean if a field has been set.
func (o *PitDetail) HasKeepAlive() bool {
	if o != nil && !IsNil(o.KeepAlive) {
		return true
	}

	return false
}

// SetKeepAlive gets a reference to the given int64 and assigns it to the KeepAlive field.
func (o *PitDetail) SetKeepAlive(v int64) {
	o.KeepAlive = &v
}

func (o PitDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PitDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PitId) {
		toSerialize["pit_id"] = o.PitId
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creation_time"] = o.CreationTime
	}
	if !IsNil(o.KeepAlive) {
		toSerialize["keep_alive"] = o.KeepAlive
	}
	return toSerialize, nil
}

type NullablePitDetail struct {
	value *PitDetail
	isSet bool
}

func (v NullablePitDetail) Get() *PitDetail {
	return v.value
}

func (v *NullablePitDetail) Set(val *PitDetail) {
	v.value = val
	v.isSet = true
}

func (v NullablePitDetail) IsSet() bool {
	return v.isSet
}

func (v *NullablePitDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePitDetail(val *PitDetail) *NullablePitDetail {
	return &NullablePitDetail{value: val, isSet: true}
}

func (v NullablePitDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePitDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


