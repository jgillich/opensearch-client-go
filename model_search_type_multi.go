/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
	"fmt"
)

// SearchTypeMulti Search operation type.
type SearchTypeMulti string

// List of SearchTypeMulti
const (
	QUERY_THEN_FETCH SearchTypeMulti = "query_then_fetch"
	QUERY_AND_FETCH SearchTypeMulti = "query_and_fetch"
	DFS_QUERY_THEN_FETCH SearchTypeMulti = "dfs_query_then_fetch"
	DFS_QUERY_AND_FETCH SearchTypeMulti = "dfs_query_and_fetch"
)

// All allowed values of SearchTypeMulti enum
var AllowedSearchTypeMultiEnumValues = []SearchTypeMulti{
	"query_then_fetch",
	"query_and_fetch",
	"dfs_query_then_fetch",
	"dfs_query_and_fetch",
}

func (v *SearchTypeMulti) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchTypeMulti(value)
	for _, existing := range AllowedSearchTypeMultiEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchTypeMulti", value)
}

// NewSearchTypeMultiFromValue returns a pointer to a valid SearchTypeMulti
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchTypeMultiFromValue(v string) (*SearchTypeMulti, error) {
	ev := SearchTypeMulti(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchTypeMulti: valid values are %v", v, AllowedSearchTypeMultiEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchTypeMulti) IsValid() bool {
	for _, existing := range AllowedSearchTypeMultiEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchTypeMulti value
func (v SearchTypeMulti) Ptr() *SearchTypeMulti {
	return &v
}

type NullableSearchTypeMulti struct {
	value *SearchTypeMulti
	isSet bool
}

func (v NullableSearchTypeMulti) Get() *SearchTypeMulti {
	return v.value
}

func (v *NullableSearchTypeMulti) Set(val *SearchTypeMulti) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchTypeMulti) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchTypeMulti) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchTypeMulti(val *SearchTypeMulti) *NullableSearchTypeMulti {
	return &NullableSearchTypeMulti{value: val, isSet: true}
}

func (v NullableSearchTypeMulti) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchTypeMulti) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

