/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
	"fmt"
)

// RefreshEnum If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.
type RefreshEnum string

// List of RefreshEnum
const (
	TRUE RefreshEnum = "true"
	FALSE RefreshEnum = "false"
	WAIT_FOR RefreshEnum = "wait_for"
)

// All allowed values of RefreshEnum enum
var AllowedRefreshEnumEnumValues = []RefreshEnum{
	"true",
	"false",
	"wait_for",
}

func (v *RefreshEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RefreshEnum(value)
	for _, existing := range AllowedRefreshEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RefreshEnum", value)
}

// NewRefreshEnumFromValue returns a pointer to a valid RefreshEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRefreshEnumFromValue(v string) (*RefreshEnum, error) {
	ev := RefreshEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RefreshEnum: valid values are %v", v, AllowedRefreshEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RefreshEnum) IsValid() bool {
	for _, existing := range AllowedRefreshEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RefreshEnum value
func (v RefreshEnum) Ptr() *RefreshEnum {
	return &v
}

type NullableRefreshEnum struct {
	value *RefreshEnum
	isSet bool
}

func (v NullableRefreshEnum) Get() *RefreshEnum {
	return v.value
}

func (v *NullableRefreshEnum) Set(val *RefreshEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRefreshEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRefreshEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefreshEnum(val *RefreshEnum) *NullableRefreshEnum {
	return &NullableRefreshEnum{value: val, isSet: true}
}

func (v NullableRefreshEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefreshEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

