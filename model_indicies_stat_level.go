/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
	"fmt"
)

// IndiciesStatLevel Return stats aggregated at cluster, index or shard level.
type IndiciesStatLevel string

// List of IndiciesStatLevel
const (
	CLUSTER IndiciesStatLevel = "cluster"
	INDICES IndiciesStatLevel = "indices"
	SHARDS IndiciesStatLevel = "shards"
)

// All allowed values of IndiciesStatLevel enum
var AllowedIndiciesStatLevelEnumValues = []IndiciesStatLevel{
	"cluster",
	"indices",
	"shards",
}

func (v *IndiciesStatLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IndiciesStatLevel(value)
	for _, existing := range AllowedIndiciesStatLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IndiciesStatLevel", value)
}

// NewIndiciesStatLevelFromValue returns a pointer to a valid IndiciesStatLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIndiciesStatLevelFromValue(v string) (*IndiciesStatLevel, error) {
	ev := IndiciesStatLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IndiciesStatLevel: valid values are %v", v, AllowedIndiciesStatLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IndiciesStatLevel) IsValid() bool {
	for _, existing := range AllowedIndiciesStatLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IndiciesStatLevel value
func (v IndiciesStatLevel) Ptr() *IndiciesStatLevel {
	return &v
}

type NullableIndiciesStatLevel struct {
	value *IndiciesStatLevel
	isSet bool
}

func (v NullableIndiciesStatLevel) Get() *IndiciesStatLevel {
	return v.value
}

func (v *NullableIndiciesStatLevel) Set(val *IndiciesStatLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableIndiciesStatLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableIndiciesStatLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndiciesStatLevel(val *IndiciesStatLevel) *NullableIndiciesStatLevel {
	return &NullableIndiciesStatLevel{value: val, isSet: true}
}

func (v NullableIndiciesStatLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndiciesStatLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

