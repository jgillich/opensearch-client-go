/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DataStreamIndex type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataStreamIndex{}

// DataStreamIndex struct for DataStreamIndex
type DataStreamIndex struct {
	IndexName *string `json:"index_name,omitempty"`
	IndexUuid *string `json:"index_uuid,omitempty"`
}

// NewDataStreamIndex instantiates a new DataStreamIndex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStreamIndex() *DataStreamIndex {
	this := DataStreamIndex{}
	return &this
}

// NewDataStreamIndexWithDefaults instantiates a new DataStreamIndex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStreamIndexWithDefaults() *DataStreamIndex {
	this := DataStreamIndex{}
	return &this
}

// GetIndexName returns the IndexName field value if set, zero value otherwise.
func (o *DataStreamIndex) GetIndexName() string {
	if o == nil || IsNil(o.IndexName) {
		var ret string
		return ret
	}
	return *o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStreamIndex) GetIndexNameOk() (*string, bool) {
	if o == nil || IsNil(o.IndexName) {
		return nil, false
	}
	return o.IndexName, true
}

// HasIndexName returns a boolean if a field has been set.
func (o *DataStreamIndex) HasIndexName() bool {
	if o != nil && !IsNil(o.IndexName) {
		return true
	}

	return false
}

// SetIndexName gets a reference to the given string and assigns it to the IndexName field.
func (o *DataStreamIndex) SetIndexName(v string) {
	o.IndexName = &v
}

// GetIndexUuid returns the IndexUuid field value if set, zero value otherwise.
func (o *DataStreamIndex) GetIndexUuid() string {
	if o == nil || IsNil(o.IndexUuid) {
		var ret string
		return ret
	}
	return *o.IndexUuid
}

// GetIndexUuidOk returns a tuple with the IndexUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStreamIndex) GetIndexUuidOk() (*string, bool) {
	if o == nil || IsNil(o.IndexUuid) {
		return nil, false
	}
	return o.IndexUuid, true
}

// HasIndexUuid returns a boolean if a field has been set.
func (o *DataStreamIndex) HasIndexUuid() bool {
	if o != nil && !IsNil(o.IndexUuid) {
		return true
	}

	return false
}

// SetIndexUuid gets a reference to the given string and assigns it to the IndexUuid field.
func (o *DataStreamIndex) SetIndexUuid(v string) {
	o.IndexUuid = &v
}

func (o DataStreamIndex) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataStreamIndex) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IndexName) {
		toSerialize["index_name"] = o.IndexName
	}
	if !IsNil(o.IndexUuid) {
		toSerialize["index_uuid"] = o.IndexUuid
	}
	return toSerialize, nil
}

type NullableDataStreamIndex struct {
	value *DataStreamIndex
	isSet bool
}

func (v NullableDataStreamIndex) Get() *DataStreamIndex {
	return v.value
}

func (v *NullableDataStreamIndex) Set(val *DataStreamIndex) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStreamIndex) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStreamIndex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStreamIndex(val *DataStreamIndex) *NullableDataStreamIndex {
	return &NullableDataStreamIndex{value: val, isSet: true}
}

func (v NullableDataStreamIndex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStreamIndex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


