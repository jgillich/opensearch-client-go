/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
	"fmt"
)

// DefaultOperator The default operator for query string query (AND or OR).
type DefaultOperator string

// List of DefaultOperator
const (
	AND DefaultOperator = "AND"
	OR DefaultOperator = "OR"
)

// All allowed values of DefaultOperator enum
var AllowedDefaultOperatorEnumValues = []DefaultOperator{
	"AND",
	"OR",
}

func (v *DefaultOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DefaultOperator(value)
	for _, existing := range AllowedDefaultOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DefaultOperator", value)
}

// NewDefaultOperatorFromValue returns a pointer to a valid DefaultOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDefaultOperatorFromValue(v string) (*DefaultOperator, error) {
	ev := DefaultOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DefaultOperator: valid values are %v", v, AllowedDefaultOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DefaultOperator) IsValid() bool {
	for _, existing := range AllowedDefaultOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DefaultOperator value
func (v DefaultOperator) Ptr() *DefaultOperator {
	return &v
}

type NullableDefaultOperator struct {
	value *DefaultOperator
	isSet bool
}

func (v NullableDefaultOperator) Get() *DefaultOperator {
	return v.value
}

func (v *NullableDefaultOperator) Set(val *DefaultOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultOperator(val *DefaultOperator) *NullableDefaultOperator {
	return &NullableDefaultOperator{value: val, isSet: true}
}

func (v NullableDefaultOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

