/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
)

// checks if the TenantPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantPermission{}

// TenantPermission struct for TenantPermission
type TenantPermission struct {
	TenantPatterns []string `json:"tenant_patterns,omitempty"`
	AllowedActions []string `json:"allowed_actions,omitempty"`
}

// NewTenantPermission instantiates a new TenantPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantPermission() *TenantPermission {
	this := TenantPermission{}
	return &this
}

// NewTenantPermissionWithDefaults instantiates a new TenantPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantPermissionWithDefaults() *TenantPermission {
	this := TenantPermission{}
	return &this
}

// GetTenantPatterns returns the TenantPatterns field value if set, zero value otherwise.
func (o *TenantPermission) GetTenantPatterns() []string {
	if o == nil || IsNil(o.TenantPatterns) {
		var ret []string
		return ret
	}
	return o.TenantPatterns
}

// GetTenantPatternsOk returns a tuple with the TenantPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantPermission) GetTenantPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantPatterns) {
		return nil, false
	}
	return o.TenantPatterns, true
}

// HasTenantPatterns returns a boolean if a field has been set.
func (o *TenantPermission) HasTenantPatterns() bool {
	if o != nil && !IsNil(o.TenantPatterns) {
		return true
	}

	return false
}

// SetTenantPatterns gets a reference to the given []string and assigns it to the TenantPatterns field.
func (o *TenantPermission) SetTenantPatterns(v []string) {
	o.TenantPatterns = v
}

// GetAllowedActions returns the AllowedActions field value if set, zero value otherwise.
func (o *TenantPermission) GetAllowedActions() []string {
	if o == nil || IsNil(o.AllowedActions) {
		var ret []string
		return ret
	}
	return o.AllowedActions
}

// GetAllowedActionsOk returns a tuple with the AllowedActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantPermission) GetAllowedActionsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedActions) {
		return nil, false
	}
	return o.AllowedActions, true
}

// HasAllowedActions returns a boolean if a field has been set.
func (o *TenantPermission) HasAllowedActions() bool {
	if o != nil && !IsNil(o.AllowedActions) {
		return true
	}

	return false
}

// SetAllowedActions gets a reference to the given []string and assigns it to the AllowedActions field.
func (o *TenantPermission) SetAllowedActions(v []string) {
	o.AllowedActions = v
}

func (o TenantPermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantPatterns) {
		toSerialize["tenant_patterns"] = o.TenantPatterns
	}
	if !IsNil(o.AllowedActions) {
		toSerialize["allowed_actions"] = o.AllowedActions
	}
	return toSerialize, nil
}

type NullableTenantPermission struct {
	value *TenantPermission
	isSet bool
}

func (v NullableTenantPermission) Get() *TenantPermission {
	return v.value
}

func (v *NullableTenantPermission) Set(val *TenantPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantPermission(val *TenantPermission) *NullableTenantPermission {
	return &NullableTenantPermission{value: val, isSet: true}
}

func (v NullableTenantPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


