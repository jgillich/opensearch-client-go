/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
	"fmt"
)

// OpType Explicit operation type. Defaults to `index` for requests with an explicit document ID, and to `create`for requests without an explicit document ID.
type OpType string

// List of OpType
const (
	INDEX OpType = "index"
	CREATE OpType = "create"
)

// All allowed values of OpType enum
var AllowedOpTypeEnumValues = []OpType{
	"index",
	"create",
}

func (v *OpType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpType(value)
	for _, existing := range AllowedOpTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpType", value)
}

// NewOpTypeFromValue returns a pointer to a valid OpType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpTypeFromValue(v string) (*OpType, error) {
	ev := OpType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpType: valid values are %v", v, AllowedOpTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpType) IsValid() bool {
	for _, existing := range AllowedOpTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpType value
func (v OpType) Ptr() *OpType {
	return &v
}

type NullableOpType struct {
	value *OpType
	isSet bool
}

func (v NullableOpType) Get() *OpType {
	return v.value
}

func (v *NullableOpType) Set(val *OpType) {
	v.value = val
	v.isSet = true
}

func (v NullableOpType) IsSet() bool {
	return v.isSet
}

func (v *NullableOpType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpType(val *OpType) *NullableOpType {
	return &NullableOpType{value: val, isSet: true}
}

func (v NullableOpType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

