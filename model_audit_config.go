/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditConfig{}

// AuditConfig struct for AuditConfig
type AuditConfig struct {
	Compliance *ComplianceConfig `json:"compliance,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Audit *AuditLogsConfig `json:"audit,omitempty"`
}

// NewAuditConfig instantiates a new AuditConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditConfig() *AuditConfig {
	this := AuditConfig{}
	return &this
}

// NewAuditConfigWithDefaults instantiates a new AuditConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditConfigWithDefaults() *AuditConfig {
	this := AuditConfig{}
	return &this
}

// GetCompliance returns the Compliance field value if set, zero value otherwise.
func (o *AuditConfig) GetCompliance() ComplianceConfig {
	if o == nil || IsNil(o.Compliance) {
		var ret ComplianceConfig
		return ret
	}
	return *o.Compliance
}

// GetComplianceOk returns a tuple with the Compliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditConfig) GetComplianceOk() (*ComplianceConfig, bool) {
	if o == nil || IsNil(o.Compliance) {
		return nil, false
	}
	return o.Compliance, true
}

// HasCompliance returns a boolean if a field has been set.
func (o *AuditConfig) HasCompliance() bool {
	if o != nil && !IsNil(o.Compliance) {
		return true
	}

	return false
}

// SetCompliance gets a reference to the given ComplianceConfig and assigns it to the Compliance field.
func (o *AuditConfig) SetCompliance(v ComplianceConfig) {
	o.Compliance = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AuditConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AuditConfig) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AuditConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAudit returns the Audit field value if set, zero value otherwise.
func (o *AuditConfig) GetAudit() AuditLogsConfig {
	if o == nil || IsNil(o.Audit) {
		var ret AuditLogsConfig
		return ret
	}
	return *o.Audit
}

// GetAuditOk returns a tuple with the Audit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditConfig) GetAuditOk() (*AuditLogsConfig, bool) {
	if o == nil || IsNil(o.Audit) {
		return nil, false
	}
	return o.Audit, true
}

// HasAudit returns a boolean if a field has been set.
func (o *AuditConfig) HasAudit() bool {
	if o != nil && !IsNil(o.Audit) {
		return true
	}

	return false
}

// SetAudit gets a reference to the given AuditLogsConfig and assigns it to the Audit field.
func (o *AuditConfig) SetAudit(v AuditLogsConfig) {
	o.Audit = &v
}

func (o AuditConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Compliance) {
		toSerialize["compliance"] = o.Compliance
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Audit) {
		toSerialize["audit"] = o.Audit
	}
	return toSerialize, nil
}

type NullableAuditConfig struct {
	value *AuditConfig
	isSet bool
}

func (v NullableAuditConfig) Get() *AuditConfig {
	return v.value
}

func (v *NullableAuditConfig) Set(val *AuditConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditConfig(val *AuditConfig) *NullableAuditConfig {
	return &NullableAuditConfig{value: val, isSet: true}
}

func (v NullableAuditConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


