/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SuggestMode Specify suggest mode.
type SuggestMode string

// List of SuggestMode
const (
	MISSING SuggestMode = "missing"
	POPULAR SuggestMode = "popular"
	ALWAYS SuggestMode = "always"
)

// All allowed values of SuggestMode enum
var AllowedSuggestModeEnumValues = []SuggestMode{
	"missing",
	"popular",
	"always",
}

func (v *SuggestMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuggestMode(value)
	for _, existing := range AllowedSuggestModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuggestMode", value)
}

// NewSuggestModeFromValue returns a pointer to a valid SuggestMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuggestModeFromValue(v string) (*SuggestMode, error) {
	ev := SuggestMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuggestMode: valid values are %v", v, AllowedSuggestModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuggestMode) IsValid() bool {
	for _, existing := range AllowedSuggestModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuggestMode value
func (v SuggestMode) Ptr() *SuggestMode {
	return &v
}

type NullableSuggestMode struct {
	value *SuggestMode
	isSet bool
}

func (v NullableSuggestMode) Get() *SuggestMode {
	return v.value
}

func (v *NullableSuggestMode) Set(val *SuggestMode) {
	v.value = val
	v.isSet = true
}

func (v NullableSuggestMode) IsSet() bool {
	return v.isSet
}

func (v *NullableSuggestMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuggestMode(val *SuggestMode) *NullableSuggestMode {
	return &NullableSuggestMode{value: val, isSet: true}
}

func (v NullableSuggestMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuggestMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

