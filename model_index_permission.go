/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package opensearch

import (
	"encoding/json"
)

// checks if the IndexPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexPermission{}

// IndexPermission struct for IndexPermission
type IndexPermission struct {
	IndexPatterns []string `json:"index_patterns,omitempty"`
	Dls *string `json:"dls,omitempty"`
	Fls []string `json:"fls,omitempty"`
	MaskedFields []string `json:"masked_fields,omitempty"`
	AllowedActions []string `json:"allowed_actions,omitempty"`
}

// NewIndexPermission instantiates a new IndexPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexPermission() *IndexPermission {
	this := IndexPermission{}
	return &this
}

// NewIndexPermissionWithDefaults instantiates a new IndexPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexPermissionWithDefaults() *IndexPermission {
	this := IndexPermission{}
	return &this
}

// GetIndexPatterns returns the IndexPatterns field value if set, zero value otherwise.
func (o *IndexPermission) GetIndexPatterns() []string {
	if o == nil || IsNil(o.IndexPatterns) {
		var ret []string
		return ret
	}
	return o.IndexPatterns
}

// GetIndexPatternsOk returns a tuple with the IndexPatterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexPermission) GetIndexPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.IndexPatterns) {
		return nil, false
	}
	return o.IndexPatterns, true
}

// HasIndexPatterns returns a boolean if a field has been set.
func (o *IndexPermission) HasIndexPatterns() bool {
	if o != nil && !IsNil(o.IndexPatterns) {
		return true
	}

	return false
}

// SetIndexPatterns gets a reference to the given []string and assigns it to the IndexPatterns field.
func (o *IndexPermission) SetIndexPatterns(v []string) {
	o.IndexPatterns = v
}

// GetDls returns the Dls field value if set, zero value otherwise.
func (o *IndexPermission) GetDls() string {
	if o == nil || IsNil(o.Dls) {
		var ret string
		return ret
	}
	return *o.Dls
}

// GetDlsOk returns a tuple with the Dls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexPermission) GetDlsOk() (*string, bool) {
	if o == nil || IsNil(o.Dls) {
		return nil, false
	}
	return o.Dls, true
}

// HasDls returns a boolean if a field has been set.
func (o *IndexPermission) HasDls() bool {
	if o != nil && !IsNil(o.Dls) {
		return true
	}

	return false
}

// SetDls gets a reference to the given string and assigns it to the Dls field.
func (o *IndexPermission) SetDls(v string) {
	o.Dls = &v
}

// GetFls returns the Fls field value if set, zero value otherwise.
func (o *IndexPermission) GetFls() []string {
	if o == nil || IsNil(o.Fls) {
		var ret []string
		return ret
	}
	return o.Fls
}

// GetFlsOk returns a tuple with the Fls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexPermission) GetFlsOk() ([]string, bool) {
	if o == nil || IsNil(o.Fls) {
		return nil, false
	}
	return o.Fls, true
}

// HasFls returns a boolean if a field has been set.
func (o *IndexPermission) HasFls() bool {
	if o != nil && !IsNil(o.Fls) {
		return true
	}

	return false
}

// SetFls gets a reference to the given []string and assigns it to the Fls field.
func (o *IndexPermission) SetFls(v []string) {
	o.Fls = v
}

// GetMaskedFields returns the MaskedFields field value if set, zero value otherwise.
func (o *IndexPermission) GetMaskedFields() []string {
	if o == nil || IsNil(o.MaskedFields) {
		var ret []string
		return ret
	}
	return o.MaskedFields
}

// GetMaskedFieldsOk returns a tuple with the MaskedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexPermission) GetMaskedFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.MaskedFields) {
		return nil, false
	}
	return o.MaskedFields, true
}

// HasMaskedFields returns a boolean if a field has been set.
func (o *IndexPermission) HasMaskedFields() bool {
	if o != nil && !IsNil(o.MaskedFields) {
		return true
	}

	return false
}

// SetMaskedFields gets a reference to the given []string and assigns it to the MaskedFields field.
func (o *IndexPermission) SetMaskedFields(v []string) {
	o.MaskedFields = v
}

// GetAllowedActions returns the AllowedActions field value if set, zero value otherwise.
func (o *IndexPermission) GetAllowedActions() []string {
	if o == nil || IsNil(o.AllowedActions) {
		var ret []string
		return ret
	}
	return o.AllowedActions
}

// GetAllowedActionsOk returns a tuple with the AllowedActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexPermission) GetAllowedActionsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedActions) {
		return nil, false
	}
	return o.AllowedActions, true
}

// HasAllowedActions returns a boolean if a field has been set.
func (o *IndexPermission) HasAllowedActions() bool {
	if o != nil && !IsNil(o.AllowedActions) {
		return true
	}

	return false
}

// SetAllowedActions gets a reference to the given []string and assigns it to the AllowedActions field.
func (o *IndexPermission) SetAllowedActions(v []string) {
	o.AllowedActions = v
}

func (o IndexPermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndexPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IndexPatterns) {
		toSerialize["index_patterns"] = o.IndexPatterns
	}
	if !IsNil(o.Dls) {
		toSerialize["dls"] = o.Dls
	}
	if !IsNil(o.Fls) {
		toSerialize["fls"] = o.Fls
	}
	if !IsNil(o.MaskedFields) {
		toSerialize["masked_fields"] = o.MaskedFields
	}
	if !IsNil(o.AllowedActions) {
		toSerialize["allowed_actions"] = o.AllowedActions
	}
	return toSerialize, nil
}

type NullableIndexPermission struct {
	value *IndexPermission
	isSet bool
}

func (v NullableIndexPermission) Get() *IndexPermission {
	return v.value
}

func (v *NullableIndexPermission) Set(val *IndexPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexPermission(val *IndexPermission) *NullableIndexPermission {
	return &NullableIndexPermission{value: val, isSet: true}
}

func (v NullableIndexPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


