/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Role type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Role{}

// Role struct for Role
type Role struct {
	Reserved *bool `json:"reserved,omitempty"`
	Hidden *bool `json:"hidden,omitempty"`
	Description *string `json:"description,omitempty"`
	ClusterPermission []string `json:"cluster_permission,omitempty"`
	IndexPermission *IndexPermission `json:"index_permission,omitempty"`
	TenantPermissions []string `json:"tenant_permissions,omitempty"`
	Static *bool `json:"static,omitempty"`
}

// NewRole instantiates a new Role object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRole() *Role {
	this := Role{}
	return &this
}

// NewRoleWithDefaults instantiates a new Role object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleWithDefaults() *Role {
	this := Role{}
	return &this
}

// GetReserved returns the Reserved field value if set, zero value otherwise.
func (o *Role) GetReserved() bool {
	if o == nil || IsNil(o.Reserved) {
		var ret bool
		return ret
	}
	return *o.Reserved
}

// GetReservedOk returns a tuple with the Reserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetReservedOk() (*bool, bool) {
	if o == nil || IsNil(o.Reserved) {
		return nil, false
	}
	return o.Reserved, true
}

// HasReserved returns a boolean if a field has been set.
func (o *Role) HasReserved() bool {
	if o != nil && !IsNil(o.Reserved) {
		return true
	}

	return false
}

// SetReserved gets a reference to the given bool and assigns it to the Reserved field.
func (o *Role) SetReserved(v bool) {
	o.Reserved = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *Role) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *Role) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *Role) SetHidden(v bool) {
	o.Hidden = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Role) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Role) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Role) SetDescription(v string) {
	o.Description = &v
}

// GetClusterPermission returns the ClusterPermission field value if set, zero value otherwise.
func (o *Role) GetClusterPermission() []string {
	if o == nil || IsNil(o.ClusterPermission) {
		var ret []string
		return ret
	}
	return o.ClusterPermission
}

// GetClusterPermissionOk returns a tuple with the ClusterPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetClusterPermissionOk() ([]string, bool) {
	if o == nil || IsNil(o.ClusterPermission) {
		return nil, false
	}
	return o.ClusterPermission, true
}

// HasClusterPermission returns a boolean if a field has been set.
func (o *Role) HasClusterPermission() bool {
	if o != nil && !IsNil(o.ClusterPermission) {
		return true
	}

	return false
}

// SetClusterPermission gets a reference to the given []string and assigns it to the ClusterPermission field.
func (o *Role) SetClusterPermission(v []string) {
	o.ClusterPermission = v
}

// GetIndexPermission returns the IndexPermission field value if set, zero value otherwise.
func (o *Role) GetIndexPermission() IndexPermission {
	if o == nil || IsNil(o.IndexPermission) {
		var ret IndexPermission
		return ret
	}
	return *o.IndexPermission
}

// GetIndexPermissionOk returns a tuple with the IndexPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetIndexPermissionOk() (*IndexPermission, bool) {
	if o == nil || IsNil(o.IndexPermission) {
		return nil, false
	}
	return o.IndexPermission, true
}

// HasIndexPermission returns a boolean if a field has been set.
func (o *Role) HasIndexPermission() bool {
	if o != nil && !IsNil(o.IndexPermission) {
		return true
	}

	return false
}

// SetIndexPermission gets a reference to the given IndexPermission and assigns it to the IndexPermission field.
func (o *Role) SetIndexPermission(v IndexPermission) {
	o.IndexPermission = &v
}

// GetTenantPermissions returns the TenantPermissions field value if set, zero value otherwise.
func (o *Role) GetTenantPermissions() []string {
	if o == nil || IsNil(o.TenantPermissions) {
		var ret []string
		return ret
	}
	return o.TenantPermissions
}

// GetTenantPermissionsOk returns a tuple with the TenantPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetTenantPermissionsOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantPermissions) {
		return nil, false
	}
	return o.TenantPermissions, true
}

// HasTenantPermissions returns a boolean if a field has been set.
func (o *Role) HasTenantPermissions() bool {
	if o != nil && !IsNil(o.TenantPermissions) {
		return true
	}

	return false
}

// SetTenantPermissions gets a reference to the given []string and assigns it to the TenantPermissions field.
func (o *Role) SetTenantPermissions(v []string) {
	o.TenantPermissions = v
}

// GetStatic returns the Static field value if set, zero value otherwise.
func (o *Role) GetStatic() bool {
	if o == nil || IsNil(o.Static) {
		var ret bool
		return ret
	}
	return *o.Static
}

// GetStaticOk returns a tuple with the Static field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetStaticOk() (*bool, bool) {
	if o == nil || IsNil(o.Static) {
		return nil, false
	}
	return o.Static, true
}

// HasStatic returns a boolean if a field has been set.
func (o *Role) HasStatic() bool {
	if o != nil && !IsNil(o.Static) {
		return true
	}

	return false
}

// SetStatic gets a reference to the given bool and assigns it to the Static field.
func (o *Role) SetStatic(v bool) {
	o.Static = &v
}

func (o Role) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Role) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reserved) {
		toSerialize["reserved"] = o.Reserved
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ClusterPermission) {
		toSerialize["cluster_permission"] = o.ClusterPermission
	}
	if !IsNil(o.IndexPermission) {
		toSerialize["index_permission"] = o.IndexPermission
	}
	if !IsNil(o.TenantPermissions) {
		toSerialize["tenant_permissions"] = o.TenantPermissions
	}
	if !IsNil(o.Static) {
		toSerialize["static"] = o.Static
	}
	return toSerialize, nil
}

type NullableRole struct {
	value *Role
	isSet bool
}

func (v NullableRole) Get() *Role {
	return v.value
}

func (v *NullableRole) Set(val *Role) {
	v.value = val
	v.isSet = true
}

func (v NullableRole) IsSet() bool {
	return v.isSet
}

func (v *NullableRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRole(val *Role) *NullableRole {
	return &NullableRole{value: val, isSet: true}
}

func (v NullableRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


