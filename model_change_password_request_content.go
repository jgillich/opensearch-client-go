/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ChangePasswordRequestContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangePasswordRequestContent{}

// ChangePasswordRequestContent struct for ChangePasswordRequestContent
type ChangePasswordRequestContent struct {
	// The current password
	CurrentPassword string `json:"current_password"`
	// The new password to set
	Password string `json:"password"`
}

// NewChangePasswordRequestContent instantiates a new ChangePasswordRequestContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangePasswordRequestContent(currentPassword string, password string) *ChangePasswordRequestContent {
	this := ChangePasswordRequestContent{}
	this.CurrentPassword = currentPassword
	this.Password = password
	return &this
}

// NewChangePasswordRequestContentWithDefaults instantiates a new ChangePasswordRequestContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangePasswordRequestContentWithDefaults() *ChangePasswordRequestContent {
	this := ChangePasswordRequestContent{}
	return &this
}

// GetCurrentPassword returns the CurrentPassword field value
func (o *ChangePasswordRequestContent) GetCurrentPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentPassword
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value
// and a boolean to check if the value has been set.
func (o *ChangePasswordRequestContent) GetCurrentPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentPassword, true
}

// SetCurrentPassword sets field value
func (o *ChangePasswordRequestContent) SetCurrentPassword(v string) {
	o.CurrentPassword = v
}

// GetPassword returns the Password field value
func (o *ChangePasswordRequestContent) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *ChangePasswordRequestContent) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *ChangePasswordRequestContent) SetPassword(v string) {
	o.Password = v
}

func (o ChangePasswordRequestContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangePasswordRequestContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["current_password"] = o.CurrentPassword
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

type NullableChangePasswordRequestContent struct {
	value *ChangePasswordRequestContent
	isSet bool
}

func (v NullableChangePasswordRequestContent) Get() *ChangePasswordRequestContent {
	return v.value
}

func (v *NullableChangePasswordRequestContent) Set(val *ChangePasswordRequestContent) {
	v.value = val
	v.isSet = true
}

func (v NullableChangePasswordRequestContent) IsSet() bool {
	return v.isSet
}

func (v *NullableChangePasswordRequestContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangePasswordRequestContent(val *ChangePasswordRequestContent) *NullableChangePasswordRequestContent {
	return &NullableChangePasswordRequestContent{value: val, isSet: true}
}

func (v NullableChangePasswordRequestContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangePasswordRequestContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


