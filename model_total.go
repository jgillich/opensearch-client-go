/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Total type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Total{}

// Total struct for Total
type Total struct {
	Value *int32 `json:"value,omitempty"`
	Relation *Relation `json:"relation,omitempty"`
}

// NewTotal instantiates a new Total object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTotal() *Total {
	this := Total{}
	return &this
}

// NewTotalWithDefaults instantiates a new Total object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTotalWithDefaults() *Total {
	this := Total{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Total) GetValue() int32 {
	if o == nil || IsNil(o.Value) {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Total) GetValueOk() (*int32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Total) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *Total) SetValue(v int32) {
	o.Value = &v
}

// GetRelation returns the Relation field value if set, zero value otherwise.
func (o *Total) GetRelation() Relation {
	if o == nil || IsNil(o.Relation) {
		var ret Relation
		return ret
	}
	return *o.Relation
}

// GetRelationOk returns a tuple with the Relation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Total) GetRelationOk() (*Relation, bool) {
	if o == nil || IsNil(o.Relation) {
		return nil, false
	}
	return o.Relation, true
}

// HasRelation returns a boolean if a field has been set.
func (o *Total) HasRelation() bool {
	if o != nil && !IsNil(o.Relation) {
		return true
	}

	return false
}

// SetRelation gets a reference to the given Relation and assigns it to the Relation field.
func (o *Total) SetRelation(v Relation) {
	o.Relation = &v
}

func (o Total) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Total) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Relation) {
		toSerialize["relation"] = o.Relation
	}
	return toSerialize, nil
}

type NullableTotal struct {
	value *Total
	isSet bool
}

func (v NullableTotal) Get() *Total {
	return v.value
}

func (v *NullableTotal) Set(val *Total) {
	v.value = val
	v.isSet = true
}

func (v NullableTotal) IsSet() bool {
	return v.isSet
}

func (v *NullableTotal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotal(val *Total) *NullableTotal {
	return &NullableTotal{value: val, isSet: true}
}

func (v NullableTotal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


