/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditLogsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogsConfig{}

// AuditLogsConfig struct for AuditLogsConfig
type AuditLogsConfig struct {
	IgnoreUsers []string `json:"ignore_users,omitempty"`
	IgnoreRequests []string `json:"ignore_requests,omitempty"`
	DisabledRestCategories []string `json:"disabled_rest_categories,omitempty"`
	DisabledTransportCategories []string `json:"disabled_transport_categories,omitempty"`
	LogRequestBody *bool `json:"log_request_body,omitempty"`
	ResolveIndices *bool `json:"resolve_indices,omitempty"`
	ResolveBulkRequests *bool `json:"resolve_bulk_requests,omitempty"`
	ExcludeSensitiveHeaders *bool `json:"exclude_sensitive_headers,omitempty"`
	EnableTransport *bool `json:"enable_transport,omitempty"`
	EnableRest *bool `json:"enable_rest,omitempty"`
}

// NewAuditLogsConfig instantiates a new AuditLogsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogsConfig() *AuditLogsConfig {
	this := AuditLogsConfig{}
	return &this
}

// NewAuditLogsConfigWithDefaults instantiates a new AuditLogsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogsConfigWithDefaults() *AuditLogsConfig {
	this := AuditLogsConfig{}
	return &this
}

// GetIgnoreUsers returns the IgnoreUsers field value if set, zero value otherwise.
func (o *AuditLogsConfig) GetIgnoreUsers() []string {
	if o == nil || IsNil(o.IgnoreUsers) {
		var ret []string
		return ret
	}
	return o.IgnoreUsers
}

// GetIgnoreUsersOk returns a tuple with the IgnoreUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogsConfig) GetIgnoreUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoreUsers) {
		return nil, false
	}
	return o.IgnoreUsers, true
}

// HasIgnoreUsers returns a boolean if a field has been set.
func (o *AuditLogsConfig) HasIgnoreUsers() bool {
	if o != nil && !IsNil(o.IgnoreUsers) {
		return true
	}

	return false
}

// SetIgnoreUsers gets a reference to the given []string and assigns it to the IgnoreUsers field.
func (o *AuditLogsConfig) SetIgnoreUsers(v []string) {
	o.IgnoreUsers = v
}

// GetIgnoreRequests returns the IgnoreRequests field value if set, zero value otherwise.
func (o *AuditLogsConfig) GetIgnoreRequests() []string {
	if o == nil || IsNil(o.IgnoreRequests) {
		var ret []string
		return ret
	}
	return o.IgnoreRequests
}

// GetIgnoreRequestsOk returns a tuple with the IgnoreRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogsConfig) GetIgnoreRequestsOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoreRequests) {
		return nil, false
	}
	return o.IgnoreRequests, true
}

// HasIgnoreRequests returns a boolean if a field has been set.
func (o *AuditLogsConfig) HasIgnoreRequests() bool {
	if o != nil && !IsNil(o.IgnoreRequests) {
		return true
	}

	return false
}

// SetIgnoreRequests gets a reference to the given []string and assigns it to the IgnoreRequests field.
func (o *AuditLogsConfig) SetIgnoreRequests(v []string) {
	o.IgnoreRequests = v
}

// GetDisabledRestCategories returns the DisabledRestCategories field value if set, zero value otherwise.
func (o *AuditLogsConfig) GetDisabledRestCategories() []string {
	if o == nil || IsNil(o.DisabledRestCategories) {
		var ret []string
		return ret
	}
	return o.DisabledRestCategories
}

// GetDisabledRestCategoriesOk returns a tuple with the DisabledRestCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogsConfig) GetDisabledRestCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledRestCategories) {
		return nil, false
	}
	return o.DisabledRestCategories, true
}

// HasDisabledRestCategories returns a boolean if a field has been set.
func (o *AuditLogsConfig) HasDisabledRestCategories() bool {
	if o != nil && !IsNil(o.DisabledRestCategories) {
		return true
	}

	return false
}

// SetDisabledRestCategories gets a reference to the given []string and assigns it to the DisabledRestCategories field.
func (o *AuditLogsConfig) SetDisabledRestCategories(v []string) {
	o.DisabledRestCategories = v
}

// GetDisabledTransportCategories returns the DisabledTransportCategories field value if set, zero value otherwise.
func (o *AuditLogsConfig) GetDisabledTransportCategories() []string {
	if o == nil || IsNil(o.DisabledTransportCategories) {
		var ret []string
		return ret
	}
	return o.DisabledTransportCategories
}

// GetDisabledTransportCategoriesOk returns a tuple with the DisabledTransportCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogsConfig) GetDisabledTransportCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledTransportCategories) {
		return nil, false
	}
	return o.DisabledTransportCategories, true
}

// HasDisabledTransportCategories returns a boolean if a field has been set.
func (o *AuditLogsConfig) HasDisabledTransportCategories() bool {
	if o != nil && !IsNil(o.DisabledTransportCategories) {
		return true
	}

	return false
}

// SetDisabledTransportCategories gets a reference to the given []string and assigns it to the DisabledTransportCategories field.
func (o *AuditLogsConfig) SetDisabledTransportCategories(v []string) {
	o.DisabledTransportCategories = v
}

// GetLogRequestBody returns the LogRequestBody field value if set, zero value otherwise.
func (o *AuditLogsConfig) GetLogRequestBody() bool {
	if o == nil || IsNil(o.LogRequestBody) {
		var ret bool
		return ret
	}
	return *o.LogRequestBody
}

// GetLogRequestBodyOk returns a tuple with the LogRequestBody field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogsConfig) GetLogRequestBodyOk() (*bool, bool) {
	if o == nil || IsNil(o.LogRequestBody) {
		return nil, false
	}
	return o.LogRequestBody, true
}

// HasLogRequestBody returns a boolean if a field has been set.
func (o *AuditLogsConfig) HasLogRequestBody() bool {
	if o != nil && !IsNil(o.LogRequestBody) {
		return true
	}

	return false
}

// SetLogRequestBody gets a reference to the given bool and assigns it to the LogRequestBody field.
func (o *AuditLogsConfig) SetLogRequestBody(v bool) {
	o.LogRequestBody = &v
}

// GetResolveIndices returns the ResolveIndices field value if set, zero value otherwise.
func (o *AuditLogsConfig) GetResolveIndices() bool {
	if o == nil || IsNil(o.ResolveIndices) {
		var ret bool
		return ret
	}
	return *o.ResolveIndices
}

// GetResolveIndicesOk returns a tuple with the ResolveIndices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogsConfig) GetResolveIndicesOk() (*bool, bool) {
	if o == nil || IsNil(o.ResolveIndices) {
		return nil, false
	}
	return o.ResolveIndices, true
}

// HasResolveIndices returns a boolean if a field has been set.
func (o *AuditLogsConfig) HasResolveIndices() bool {
	if o != nil && !IsNil(o.ResolveIndices) {
		return true
	}

	return false
}

// SetResolveIndices gets a reference to the given bool and assigns it to the ResolveIndices field.
func (o *AuditLogsConfig) SetResolveIndices(v bool) {
	o.ResolveIndices = &v
}

// GetResolveBulkRequests returns the ResolveBulkRequests field value if set, zero value otherwise.
func (o *AuditLogsConfig) GetResolveBulkRequests() bool {
	if o == nil || IsNil(o.ResolveBulkRequests) {
		var ret bool
		return ret
	}
	return *o.ResolveBulkRequests
}

// GetResolveBulkRequestsOk returns a tuple with the ResolveBulkRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogsConfig) GetResolveBulkRequestsOk() (*bool, bool) {
	if o == nil || IsNil(o.ResolveBulkRequests) {
		return nil, false
	}
	return o.ResolveBulkRequests, true
}

// HasResolveBulkRequests returns a boolean if a field has been set.
func (o *AuditLogsConfig) HasResolveBulkRequests() bool {
	if o != nil && !IsNil(o.ResolveBulkRequests) {
		return true
	}

	return false
}

// SetResolveBulkRequests gets a reference to the given bool and assigns it to the ResolveBulkRequests field.
func (o *AuditLogsConfig) SetResolveBulkRequests(v bool) {
	o.ResolveBulkRequests = &v
}

// GetExcludeSensitiveHeaders returns the ExcludeSensitiveHeaders field value if set, zero value otherwise.
func (o *AuditLogsConfig) GetExcludeSensitiveHeaders() bool {
	if o == nil || IsNil(o.ExcludeSensitiveHeaders) {
		var ret bool
		return ret
	}
	return *o.ExcludeSensitiveHeaders
}

// GetExcludeSensitiveHeadersOk returns a tuple with the ExcludeSensitiveHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogsConfig) GetExcludeSensitiveHeadersOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeSensitiveHeaders) {
		return nil, false
	}
	return o.ExcludeSensitiveHeaders, true
}

// HasExcludeSensitiveHeaders returns a boolean if a field has been set.
func (o *AuditLogsConfig) HasExcludeSensitiveHeaders() bool {
	if o != nil && !IsNil(o.ExcludeSensitiveHeaders) {
		return true
	}

	return false
}

// SetExcludeSensitiveHeaders gets a reference to the given bool and assigns it to the ExcludeSensitiveHeaders field.
func (o *AuditLogsConfig) SetExcludeSensitiveHeaders(v bool) {
	o.ExcludeSensitiveHeaders = &v
}

// GetEnableTransport returns the EnableTransport field value if set, zero value otherwise.
func (o *AuditLogsConfig) GetEnableTransport() bool {
	if o == nil || IsNil(o.EnableTransport) {
		var ret bool
		return ret
	}
	return *o.EnableTransport
}

// GetEnableTransportOk returns a tuple with the EnableTransport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogsConfig) GetEnableTransportOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTransport) {
		return nil, false
	}
	return o.EnableTransport, true
}

// HasEnableTransport returns a boolean if a field has been set.
func (o *AuditLogsConfig) HasEnableTransport() bool {
	if o != nil && !IsNil(o.EnableTransport) {
		return true
	}

	return false
}

// SetEnableTransport gets a reference to the given bool and assigns it to the EnableTransport field.
func (o *AuditLogsConfig) SetEnableTransport(v bool) {
	o.EnableTransport = &v
}

// GetEnableRest returns the EnableRest field value if set, zero value otherwise.
func (o *AuditLogsConfig) GetEnableRest() bool {
	if o == nil || IsNil(o.EnableRest) {
		var ret bool
		return ret
	}
	return *o.EnableRest
}

// GetEnableRestOk returns a tuple with the EnableRest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogsConfig) GetEnableRestOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRest) {
		return nil, false
	}
	return o.EnableRest, true
}

// HasEnableRest returns a boolean if a field has been set.
func (o *AuditLogsConfig) HasEnableRest() bool {
	if o != nil && !IsNil(o.EnableRest) {
		return true
	}

	return false
}

// SetEnableRest gets a reference to the given bool and assigns it to the EnableRest field.
func (o *AuditLogsConfig) SetEnableRest(v bool) {
	o.EnableRest = &v
}

func (o AuditLogsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IgnoreUsers) {
		toSerialize["ignore_users"] = o.IgnoreUsers
	}
	if !IsNil(o.IgnoreRequests) {
		toSerialize["ignore_requests"] = o.IgnoreRequests
	}
	if !IsNil(o.DisabledRestCategories) {
		toSerialize["disabled_rest_categories"] = o.DisabledRestCategories
	}
	if !IsNil(o.DisabledTransportCategories) {
		toSerialize["disabled_transport_categories"] = o.DisabledTransportCategories
	}
	if !IsNil(o.LogRequestBody) {
		toSerialize["log_request_body"] = o.LogRequestBody
	}
	if !IsNil(o.ResolveIndices) {
		toSerialize["resolve_indices"] = o.ResolveIndices
	}
	if !IsNil(o.ResolveBulkRequests) {
		toSerialize["resolve_bulk_requests"] = o.ResolveBulkRequests
	}
	if !IsNil(o.ExcludeSensitiveHeaders) {
		toSerialize["exclude_sensitive_headers"] = o.ExcludeSensitiveHeaders
	}
	if !IsNil(o.EnableTransport) {
		toSerialize["enable_transport"] = o.EnableTransport
	}
	if !IsNil(o.EnableRest) {
		toSerialize["enable_rest"] = o.EnableRest
	}
	return toSerialize, nil
}

type NullableAuditLogsConfig struct {
	value *AuditLogsConfig
	isSet bool
}

func (v NullableAuditLogsConfig) Get() *AuditLogsConfig {
	return v.value
}

func (v *NullableAuditLogsConfig) Set(val *AuditLogsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogsConfig(val *AuditLogsConfig) *NullableAuditLogsConfig {
	return &NullableAuditLogsConfig{value: val, isSet: true}
}

func (v NullableAuditLogsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


