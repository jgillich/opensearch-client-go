/*
OpenSearch

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2021-11-23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HitsMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HitsMetadata{}

// HitsMetadata struct for HitsMetadata
type HitsMetadata struct {
	Total *Total `json:"total,omitempty"`
	MaxScore *float64 `json:"max_score,omitempty"`
	Hits []Hits `json:"hits,omitempty"`
}

// NewHitsMetadata instantiates a new HitsMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHitsMetadata() *HitsMetadata {
	this := HitsMetadata{}
	return &this
}

// NewHitsMetadataWithDefaults instantiates a new HitsMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHitsMetadataWithDefaults() *HitsMetadata {
	this := HitsMetadata{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *HitsMetadata) GetTotal() Total {
	if o == nil || IsNil(o.Total) {
		var ret Total
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsMetadata) GetTotalOk() (*Total, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *HitsMetadata) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given Total and assigns it to the Total field.
func (o *HitsMetadata) SetTotal(v Total) {
	o.Total = &v
}

// GetMaxScore returns the MaxScore field value if set, zero value otherwise.
func (o *HitsMetadata) GetMaxScore() float64 {
	if o == nil || IsNil(o.MaxScore) {
		var ret float64
		return ret
	}
	return *o.MaxScore
}

// GetMaxScoreOk returns a tuple with the MaxScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsMetadata) GetMaxScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.MaxScore) {
		return nil, false
	}
	return o.MaxScore, true
}

// HasMaxScore returns a boolean if a field has been set.
func (o *HitsMetadata) HasMaxScore() bool {
	if o != nil && !IsNil(o.MaxScore) {
		return true
	}

	return false
}

// SetMaxScore gets a reference to the given float64 and assigns it to the MaxScore field.
func (o *HitsMetadata) SetMaxScore(v float64) {
	o.MaxScore = &v
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *HitsMetadata) GetHits() []Hits {
	if o == nil || IsNil(o.Hits) {
		var ret []Hits
		return ret
	}
	return o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HitsMetadata) GetHitsOk() ([]Hits, bool) {
	if o == nil || IsNil(o.Hits) {
		return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *HitsMetadata) HasHits() bool {
	if o != nil && !IsNil(o.Hits) {
		return true
	}

	return false
}

// SetHits gets a reference to the given []Hits and assigns it to the Hits field.
func (o *HitsMetadata) SetHits(v []Hits) {
	o.Hits = v
}

func (o HitsMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HitsMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.MaxScore) {
		toSerialize["max_score"] = o.MaxScore
	}
	if !IsNil(o.Hits) {
		toSerialize["hits"] = o.Hits
	}
	return toSerialize, nil
}

type NullableHitsMetadata struct {
	value *HitsMetadata
	isSet bool
}

func (v NullableHitsMetadata) Get() *HitsMetadata {
	return v.value
}

func (v *NullableHitsMetadata) Set(val *HitsMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableHitsMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableHitsMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHitsMetadata(val *HitsMetadata) *NullableHitsMetadata {
	return &NullableHitsMetadata{value: val, isSet: true}
}

func (v NullableHitsMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHitsMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


